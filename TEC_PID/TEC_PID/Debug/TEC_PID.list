
TEC_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004a68  08004a68  00014a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad0  08004ad0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000074  08004b4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004b4c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000974e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018da  00000000  00000000  000297f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002b928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022355  00000000  00000000  0002c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e03  00000000  00000000  0004e43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5738  00000000  00000000  00058240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002654  00000000  00000000  0012d9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004a4c 	.word	0x08004a4c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08004a4c 	.word	0x08004a4c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b96e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9d08      	ldr	r5, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8083 	bne.w	8000d06 <__udivmoddi4+0x116>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d947      	bls.n	8000c96 <__udivmoddi4+0xa6>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b142      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0c:	f1c2 0020 	rsb	r0, r2, #32
 8000c10:	fa24 f000 	lsr.w	r0, r4, r0
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4097      	lsls	r7, r2
 8000c18:	ea40 0c01 	orr.w	ip, r0, r1
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbbc f6f8 	udiv	r6, ip, r8
 8000c28:	fa1f fe87 	uxth.w	lr, r7
 8000c2c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c34:	fb06 f10e 	mul.w	r1, r6, lr
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 8119 	bcs.w	8000e78 <__udivmoddi4+0x288>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8116 	bls.w	8000e78 <__udivmoddi4+0x288>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	443b      	add	r3, r7
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8105 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8102 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c80:	eba4 040e 	sub.w	r4, r4, lr
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b902      	cbnz	r2, 8000c9a <__udivmoddi4+0xaa>
 8000c98:	deff      	udf	#255	; 0xff
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d150      	bne.n	8000d44 <__udivmoddi4+0x154>
 8000ca2:	1bcb      	subs	r3, r1, r7
 8000ca4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca8:	fa1f f887 	uxth.w	r8, r7
 8000cac:	2601      	movs	r6, #1
 8000cae:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0xe2>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	f200 80e9 	bhi.w	8000ea4 <__udivmoddi4+0x2b4>
 8000cd2:	4684      	mov	ip, r0
 8000cd4:	1ac9      	subs	r1, r1, r3
 8000cd6:	b2a3      	uxth	r3, r4
 8000cd8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cdc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce4:	fb08 f800 	mul.w	r8, r8, r0
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x10c>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x10a>
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	f200 80d9 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	eba4 0408 	sub.w	r4, r4, r8
 8000d00:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d04:	e7bf      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d909      	bls.n	8000d1e <__udivmoddi4+0x12e>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <__udivmoddi4+0x282>
 8000d10:	2600      	movs	r6, #0
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	4630      	mov	r0, r6
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	fab3 f683 	clz	r6, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d14a      	bne.n	8000dbc <__udivmoddi4+0x1cc>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0x140>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 80b8 	bhi.w	8000ea0 <__udivmoddi4+0x2b0>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb61 0103 	sbc.w	r1, r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	468c      	mov	ip, r1
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0a8      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000d3e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f603 	lsr.w	r6, r0, r3
 8000d4c:	4097      	lsls	r7, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d56:	40d9      	lsrs	r1, r3
 8000d58:	4330      	orrs	r0, r6
 8000d5a:	0c03      	lsrs	r3, r0, #16
 8000d5c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f108 	mul.w	r1, r6, r8
 8000d70:	4299      	cmp	r1, r3
 8000d72:	fa04 f402 	lsl.w	r4, r4, r2
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x19c>
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7e:	f080 808d 	bcs.w	8000e9c <__udivmoddi4+0x2ac>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 808a 	bls.w	8000e9c <__udivmoddi4+0x2ac>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	443b      	add	r3, r7
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b281      	uxth	r1, r0
 8000d90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb00 f308 	mul.w	r3, r0, r8
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x1c4>
 8000da4:	1879      	adds	r1, r7, r1
 8000da6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000daa:	d273      	bcs.n	8000e94 <__udivmoddi4+0x2a4>
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d971      	bls.n	8000e94 <__udivmoddi4+0x2a4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4439      	add	r1, r7
 8000db4:	1acb      	subs	r3, r1, r3
 8000db6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dba:	e778      	b.n	8000cae <__udivmoddi4+0xbe>
 8000dbc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc8:	431c      	orrs	r4, r3
 8000dca:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dce:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	0c3b      	lsrs	r3, r7, #16
 8000dde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de2:	fa1f f884 	uxth.w	r8, r4
 8000de6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dee:	fb09 fa08 	mul.w	sl, r9, r8
 8000df2:	458a      	cmp	sl, r1
 8000df4:	fa02 f206 	lsl.w	r2, r2, r6
 8000df8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x220>
 8000dfe:	1861      	adds	r1, r4, r1
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d248      	bcs.n	8000e98 <__udivmoddi4+0x2a8>
 8000e06:	458a      	cmp	sl, r1
 8000e08:	d946      	bls.n	8000e98 <__udivmoddi4+0x2a8>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	4421      	add	r1, r4
 8000e10:	eba1 010a 	sub.w	r1, r1, sl
 8000e14:	b2bf      	uxth	r7, r7
 8000e16:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e1a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x24a>
 8000e2a:	19e7      	adds	r7, r4, r7
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d22e      	bcs.n	8000e90 <__udivmoddi4+0x2a0>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d92c      	bls.n	8000e90 <__udivmoddi4+0x2a0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4427      	add	r7, r4
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba7 0708 	sub.w	r7, r7, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	d31a      	bcc.n	8000e84 <__udivmoddi4+0x294>
 8000e4e:	d017      	beq.n	8000e80 <__udivmoddi4+0x290>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x27a>
 8000e52:	ebb3 020e 	subs.w	r2, r3, lr
 8000e56:	eb67 0701 	sbc.w	r7, r7, r1
 8000e5a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5e:	40f2      	lsrs	r2, r6
 8000e60:	ea4c 0202 	orr.w	r2, ip, r2
 8000e64:	40f7      	lsrs	r7, r6
 8000e66:	e9c5 2700 	strd	r2, r7, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	462e      	mov	r6, r5
 8000e74:	4628      	mov	r0, r5
 8000e76:	e70b      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e78:	4606      	mov	r6, r0
 8000e7a:	e6e9      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fd      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e80:	4543      	cmp	r3, r8
 8000e82:	d2e5      	bcs.n	8000e50 <__udivmoddi4+0x260>
 8000e84:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e88:	eb69 0104 	sbc.w	r1, r9, r4
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7df      	b.n	8000e50 <__udivmoddi4+0x260>
 8000e90:	4608      	mov	r0, r1
 8000e92:	e7d2      	b.n	8000e3a <__udivmoddi4+0x24a>
 8000e94:	4660      	mov	r0, ip
 8000e96:	e78d      	b.n	8000db4 <__udivmoddi4+0x1c4>
 8000e98:	4681      	mov	r9, r0
 8000e9a:	e7b9      	b.n	8000e10 <__udivmoddi4+0x220>
 8000e9c:	4666      	mov	r6, ip
 8000e9e:	e775      	b.n	8000d8c <__udivmoddi4+0x19c>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e74a      	b.n	8000d3a <__udivmoddi4+0x14a>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	4439      	add	r1, r7
 8000eaa:	e713      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	e724      	b.n	8000cfc <__udivmoddi4+0x10c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double A = 0.001128 ;
 8000ebe:	a3bc      	add	r3, pc, #752	; (adr r3, 80011b0 <main+0x2f8>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double B = 2.345e-4 ;
 8000ec8:	a3bb      	add	r3, pc, #748	; (adr r3, 80011b8 <main+0x300>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double C = 8.73e-8 ;
 8000ed2:	a3bb      	add	r3, pc, #748	; (adr r3, 80011c0 <main+0x308>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	float control_Volt_Analog ;
	float control_Volt_Analog_true ;
	uint32_t control_Volt_Digitised ;

	float temp_Setpoint = 32.0 ;
 8000edc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fc59 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f96f 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 fa81 	bl	80013f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eee:	f000 f9d9 	bl	80012a4 <MX_ADC1_Init>
  MX_DAC_Init();
 8000ef2:	f000 fa29 	bl	8001348 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 fa51 	bl	800139c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1) ;
 8000efa:	2100      	movs	r1, #0
 8000efc:	48a6      	ldr	r0, [pc, #664]	; (8001198 <main+0x2e0>)
 8000efe:	f001 f9c4 	bl	800228a <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1) ;
 8000f02:	48a6      	ldr	r0, [pc, #664]	; (800119c <main+0x2e4>)
 8000f04:	f000 fd22 	bl	800194c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	48a3      	ldr	r0, [pc, #652]	; (800119c <main+0x2e4>)
 8000f0e:	f000 fdef 	bl	8001af0 <HAL_ADC_PollForConversion>
	  actual_Volt_Digitised = HAL_ADC_GetValue(&hadc1) ;
 8000f12:	48a2      	ldr	r0, [pc, #648]	; (800119c <main+0x2e4>)
 8000f14:	f000 fe77 	bl	8001c06 <HAL_ADC_GetValue>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	847b      	strh	r3, [r7, #34]	; 0x22

	  actual_Volt_Analog = (actual_Volt_Digitised/4096.0)*3.3 ;
 8000f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fac4 	bl	80004ac <__aeabi_i2d>
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b9d      	ldr	r3, [pc, #628]	; (80011a0 <main+0x2e8>)
 8000f2a:	f7ff fc53 	bl	80007d4 <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	a38a      	add	r3, pc, #552	; (adr r3, 8001160 <main+0x2a8>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb20 	bl	8000580 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fdea 	bl	8000b20 <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	61fb      	str	r3, [r7, #28]
	  actual_Res = (actual_Volt_Analog/(5.0-actual_Volt_Analog))*10000 ;
 8000f50:	69f8      	ldr	r0, [r7, #28]
 8000f52:	f7ff fabd 	bl	80004d0 <__aeabi_f2d>
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
 8000f5a:	69f8      	ldr	r0, [r7, #28]
 8000f5c:	f7ff fab8 	bl	80004d0 <__aeabi_f2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	498e      	ldr	r1, [pc, #568]	; (80011a4 <main+0x2ec>)
 8000f6a:	f7ff f951 	bl	8000210 <__aeabi_dsub>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4620      	mov	r0, r4
 8000f74:	4629      	mov	r1, r5
 8000f76:	f7ff fc2d 	bl	80007d4 <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	a379      	add	r3, pc, #484	; (adr r3, 8001168 <main+0x2b0>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fafa 	bl	8000580 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fdc4 	bl	8000b20 <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	61bb      	str	r3, [r7, #24]
	  actual_Temp_Inv = A + B*log(actual_Res) + C*pow(log(actual_Res), 3.0) ;
 8000f9c:	69b8      	ldr	r0, [r7, #24]
 8000f9e:	f7ff fa97 	bl	80004d0 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	ec43 2b10 	vmov	d0, r2, r3
 8000faa:	f002 fb95 	bl	80036d8 <log>
 8000fae:	ec51 0b10 	vmov	r0, r1, d0
 8000fb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fb6:	f7ff fae3 	bl	8000580 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fc6:	f7ff f925 	bl	8000214 <__adddf3>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4614      	mov	r4, r2
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	69b8      	ldr	r0, [r7, #24]
 8000fd4:	f7ff fa7c 	bl	80004d0 <__aeabi_f2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ec43 2b10 	vmov	d0, r2, r3
 8000fe0:	f002 fb7a 	bl	80036d8 <log>
 8000fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe8:	eef0 7a60 	vmov.f32	s15, s1
 8000fec:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8001170 <main+0x2b8>
 8000ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff4:	eef0 0a67 	vmov.f32	s1, s15
 8000ff8:	f002 fbb6 	bl	8003768 <pow>
 8000ffc:	ec51 0b10 	vmov	r0, r1, d0
 8001000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001004:	f7ff fabc 	bl	8000580 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff f900 	bl	8000214 <__adddf3>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fd80 	bl	8000b20 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	617b      	str	r3, [r7, #20]
	  actual_Temp = (1/actual_Temp_Inv) - 273.15 ;
 8001024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001028:	edd7 7a05 	vldr	s15, [r7, #20]
 800102c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001030:	ee16 0a90 	vmov	r0, s13
 8001034:	f7ff fa4c 	bl	80004d0 <__aeabi_f2d>
 8001038:	a34f      	add	r3, pc, #316	; (adr r3, 8001178 <main+0x2c0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff f8e7 	bl	8000210 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fd69 	bl	8000b20 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	613b      	str	r3, [r7, #16]

	  temp_diff          = actual_Temp - temp_Setpoint ;  // Proportional Control Signal
 8001052:	ed97 7a04 	vldr	s14, [r7, #16]
 8001056:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105e:	edc7 7a03 	vstr	s15, [r7, #12]
	  HAL_Delay(10) ;
 8001062:	200a      	movs	r0, #10
 8001064:	f000 fc0a 	bl	800187c <HAL_Delay>
	  temp_diff_Integral = temp_diff_Integral + 0.05*(temp_diff + prev_temp_diff) ; // Integral Control Signal
 8001068:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800106a:	f7ff fa31 	bl	80004d0 <__aeabi_f2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	ed97 7a03 	vldr	s14, [r7, #12]
 8001076:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800107a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107e:	ee17 0a90 	vmov	r0, s15
 8001082:	f7ff fa25 	bl	80004d0 <__aeabi_f2d>
 8001086:	a33e      	add	r3, pc, #248	; (adr r3, 8001180 <main+0x2c8>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fa78 	bl	8000580 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff f8bc 	bl	8000214 <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd3c 	bl	8000b20 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48

	  control_Volt_Analog = (temp_diff+temp_diff_Integral)/(2.8) ;
 80010ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	ee17 0a90 	vmov	r0, s15
 80010bc:	f7ff fa08 	bl	80004d0 <__aeabi_f2d>
 80010c0:	a331      	add	r3, pc, #196	; (adr r3, 8001188 <main+0x2d0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fb85 	bl	80007d4 <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd25 	bl	8000b20 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	60bb      	str	r3, [r7, #8]

	  if (control_Volt_Analog > 3.0) {
 80010da:	edd7 7a02 	vldr	s15, [r7, #8]
 80010de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dd02      	ble.n	80010f2 <main+0x23a>
		  control_Volt_Analog_true = 3.0 ;
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <main+0x2f0>)
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
 80010f0:	e010      	b.n	8001114 <main+0x25c>
	  }
	  else if (control_Volt_Analog < 0.1) {
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f7ff f9ec 	bl	80004d0 <__aeabi_f2d>
 80010f8:	a325      	add	r3, pc, #148	; (adr r3, 8001190 <main+0x2d8>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fcb1 	bl	8000a64 <__aeabi_dcmplt>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <main+0x258>
		  control_Volt_Analog_true = 0.0 ;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
 800110e:	e001      	b.n	8001114 <main+0x25c>
	  }
	  else {
		  control_Volt_Analog_true = control_Volt_Analog ;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
	  }
	  control_Volt_Digitised = control_Volt_Analog_true*(0xfff+1)/3.3 ;
 8001114:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001118:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80011ac <main+0x2f4>
 800111c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001120:	ee17 0a90 	vmov	r0, s15
 8001124:	f7ff f9d4 	bl	80004d0 <__aeabi_f2d>
 8001128:	a30d      	add	r3, pc, #52	; (adr r3, 8001160 <main+0x2a8>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fb51 	bl	80007d4 <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fcd1 	bl	8000ae0 <__aeabi_d2uiz>
 800113e:	4603      	mov	r3, r0
 8001140:	607b      	str	r3, [r7, #4]

	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, control_Volt_Digitised) ;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <main+0x2e0>)
 800114a:	f001 f8f0 	bl	800232e <HAL_DAC_SetValue>

	  HAL_Delay(1000) ;
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f000 fb93 	bl	800187c <HAL_Delay>

	  prev_temp_diff = temp_diff ;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_ADC_Start(&hadc1) ;
 800115a:	e6d2      	b.n	8000f02 <main+0x4a>
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	400a6666 	.word	0x400a6666
 8001168:	00000000 	.word	0x00000000
 800116c:	40c38800 	.word	0x40c38800
 8001170:	00000000 	.word	0x00000000
 8001174:	40080000 	.word	0x40080000
 8001178:	66666666 	.word	0x66666666
 800117c:	40711266 	.word	0x40711266
 8001180:	9999999a 	.word	0x9999999a
 8001184:	3fa99999 	.word	0x3fa99999
 8001188:	66666666 	.word	0x66666666
 800118c:	40066666 	.word	0x40066666
 8001190:	9999999a 	.word	0x9999999a
 8001194:	3fb99999 	.word	0x3fb99999
 8001198:	200000d8 	.word	0x200000d8
 800119c:	20000090 	.word	0x20000090
 80011a0:	40b00000 	.word	0x40b00000
 80011a4:	40140000 	.word	0x40140000
 80011a8:	40400000 	.word	0x40400000
 80011ac:	45800000 	.word	0x45800000
 80011b0:	c70867ae 	.word	0xc70867ae
 80011b4:	3f527b2c 	.word	0x3f527b2c
 80011b8:	a96d4c34 	.word	0xa96d4c34
 80011bc:	3f2ebc83 	.word	0x3f2ebc83
 80011c0:	d7782d80 	.word	0xd7782d80
 80011c4:	3e776f35 	.word	0x3e776f35

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b094      	sub	sp, #80	; 0x50
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	2234      	movs	r2, #52	; 0x34
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fa76 	bl	80036c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SystemClock_Config+0xd4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <SystemClock_Config+0xd4>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <SystemClock_Config+0xd4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SystemClock_Config+0xd8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SystemClock_Config+0xd8>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <SystemClock_Config+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001230:	2310      	movs	r3, #16
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800123c:	2310      	movs	r3, #16
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001240:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001246:	2304      	movs	r3, #4
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fd58 	bl	8002d0c <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001262:	f000 f935 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2102      	movs	r1, #2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fa76 	bl	8002774 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800128e:	f000 f91f 	bl	80014d0 <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3750      	adds	r7, #80	; 0x50
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_ADC1_Init+0x98>)
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <MX_ADC1_Init+0x9c>)
 80012ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_ADC1_Init+0x98>)
 80012be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_ADC1_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_ADC1_Init+0x98>)
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <MX_ADC1_Init+0xa0>)
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_ADC1_Init+0x98>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_ADC1_Init+0x98>)
 8001300:	2201      	movs	r2, #1
 8001302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_ADC1_Init+0x98>)
 8001306:	f000 fadd 	bl	80018c4 <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001310:	f000 f8de 	bl	80014d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC1_Init+0x98>)
 8001326:	f000 fc7b 	bl	8001c20 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001330:	f000 f8ce 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000090 	.word	0x20000090
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001

08001348 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_DAC_Init+0x4c>)
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <MX_DAC_Init+0x50>)
 800135a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_DAC_Init+0x4c>)
 800135e:	f000 ff72 	bl	8002246 <HAL_DAC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001368:	f000 f8b2 	bl	80014d0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_DAC_Init+0x4c>)
 800137c:	f000 fffc 	bl	8002378 <HAL_DAC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001386:	f000 f8a3 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000d8 	.word	0x200000d8
 8001398:	40007400 	.word	0x40007400

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f001 ff38 	bl	8003248 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f877 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000ec 	.word	0x200000ec
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800147c:	f001 f960 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_GPIO_Init+0xd8>)
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_GPIO_Init+0xdc>)
 8001496:	f000 ffbf 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149a:	2320      	movs	r3, #32
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0xd4>)
 80014b2:	f000 ffb1 	bl	8002418 <HAL_GPIO_Init>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	10210000 	.word	0x10210000
 80014cc:	40020800 	.word	0x40020800

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151a:	2007      	movs	r0, #7
 800151c:	f000 fe60 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_ADC_MspInit+0x7c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d127      	bne.n	800159e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_ADC_MspInit+0x80>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_ADC_MspInit+0x80>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_ADC_MspInit+0x80>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_ADC_MspInit+0x80>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_ADC_MspInit+0x80>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_ADC_MspInit+0x80>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158a:	2303      	movs	r3, #3
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_ADC_MspInit+0x84>)
 800159a:	f000 ff3d 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012000 	.word	0x40012000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000

080015b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_DAC_MspInit+0x7c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d127      	bne.n	8001626 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_DAC_MspInit+0x80>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_DAC_MspInit+0x80>)
 80015e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_DAC_MspInit+0x80>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_DAC_MspInit+0x80>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_DAC_MspInit+0x80>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_DAC_MspInit+0x80>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800160e:	2310      	movs	r3, #16
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_DAC_MspInit+0x84>)
 8001622:	f000 fef9 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40007400 	.word	0x40007400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001696:	230c      	movs	r3, #12
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x8c>)
 80016b2:	f000 feb1 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f890 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd7 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f001 ff85 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff fb9f 	bl	8000eb8 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001788:	08004ad8 	.word	0x08004ad8
  ldr r2, =_sbss
 800178c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001790:	20000134 	.word	0x20000134

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 fd0d 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fe86 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fd17 	bl	800222e <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 fced 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000000 	.word	0x20000000
 8001834:	20000008 	.word	0x20000008
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	20000130 	.word	0x20000130

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000130 	.word	0x20000130

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008

080018c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e033      	b.n	8001942 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe22 	bl	800152c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800190a:	f023 0302 	bic.w	r3, r3, #2
 800190e:	f043 0202 	orr.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fab4 	bl	8001e84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
 8001932:	e001      	b.n	8001938 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Start+0x1a>
 8001962:	2302      	movs	r3, #2
 8001964:	e0b2      	b.n	8001acc <HAL_ADC_Start+0x180>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d018      	beq.n	80019ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800198c:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_ADC_Start+0x18c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_ADC_Start+0x190>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9a      	lsrs	r2, r3, #18
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019a0:	e002      	b.n	80019a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d17a      	bne.n	8001ab2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019fa:	d106      	bne.n	8001a0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f023 0206 	bic.w	r2, r3, #6
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d12a      	bne.n	8001a88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <HAL_ADC_Start+0x198>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d015      	beq.n	8001a68 <HAL_ADC_Start+0x11c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <HAL_ADC_Start+0x19c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_Start+0x106>
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <HAL_ADC_Start+0x1a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d136      	bne.n	8001aca <HAL_ADC_Start+0x17e>
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_ADC_Start+0x194>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d130      	bne.n	8001aca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d129      	bne.n	8001aca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e020      	b.n	8001aca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <HAL_ADC_Start+0x198>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_Start+0x17e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d114      	bne.n	8001aca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e00b      	b.n	8001aca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	40012100 	.word	0x40012100
 8001aec:	40012200 	.word	0x40012200

08001af0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0c:	d113      	bne.n	8001b36 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1c:	d10b      	bne.n	8001b36 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0220 	orr.w	r2, r3, #32
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e063      	b.n	8001bfe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b36:	f7ff fe95 	bl	8001864 <HAL_GetTick>
 8001b3a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b3c:	e021      	b.n	8001b82 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d01d      	beq.n	8001b82 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_PollForConversion+0x6c>
 8001b4c:	f7ff fe8a 	bl	8001864 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d212      	bcs.n	8001b82 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d00b      	beq.n	8001b82 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0204 	orr.w	r2, r3, #4
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e03d      	b.n	8001bfe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d1d6      	bne.n	8001b3e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0212 	mvn.w	r2, #18
 8001b98:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d123      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d11f      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e113      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x244>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d925      	bls.n	8001c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	400a      	ands	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4403      	add	r3, r0
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	e022      	b.n	8001cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4403      	add	r3, r0
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d824      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2e:	e04c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d824      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	; 0x23
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b23      	subs	r3, #35	; 0x23
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d80:	e023      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b41      	subs	r3, #65	; 0x41
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b41      	subs	r3, #65	; 0x41
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_ADC_ConfigChannel+0x250>)
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_ADC_ConfigChannel+0x254>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10f      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1d8>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d10b      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_ADC_ConfigChannel+0x254>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_ADC_ConfigChannel+0x258>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x1f4>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b11      	cmp	r3, #17
 8001e12:	d122      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_ADC_ConfigChannel+0x258>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_ADC_ConfigChannel+0x260>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9a      	lsrs	r2, r3, #18
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40012300 	.word	0x40012300
 8001e74:	40012000 	.word	0x40012000
 8001e78:	10000012 	.word	0x10000012
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83

08001e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <ADC_Init+0x1f0>)
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	021a      	lsls	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	4a58      	ldr	r2, [pc, #352]	; (8002078 <ADC_Init+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e00f      	b.n	8001f82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0202 	bic.w	r2, r2, #2
 8001f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
 8001f9c:	005a      	lsls	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	035a      	lsls	r2, r3, #13
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e007      	b.n	8001ff8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	3b01      	subs	r3, #1
 8002014:	051a      	lsls	r2, r3, #20
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203a:	025a      	lsls	r2, r3, #9
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	029a      	lsls	r2, r3, #10
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40012300 	.word	0x40012300
 8002078:	0f000001 	.word	0x0f000001

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff47 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff5c 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffb0 	bl	800219c <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e014      	b.n	8002282 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d105      	bne.n	800226e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff f9a3 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	795b      	ldrb	r3, [r3, #5]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_DAC_Start+0x16>
 800229c:	2302      	movs	r3, #2
 800229e:	e040      	b.n	8002322 <HAL_DAC_Start+0x98>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80022d4:	2b3c      	cmp	r3, #60	; 0x3c
 80022d6:	d11d      	bne.n	8002314 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	e014      	b.n	8002314 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	213c      	movs	r1, #60	; 0x3c
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	429a      	cmp	r2, r3
 8002302:	d107      	bne.n	8002314 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0202 	orr.w	r2, r2, #2
 8002312:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800232e:	b480      	push	{r7}
 8002330:	b087      	sub	sp, #28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3308      	adds	r3, #8
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e004      	b.n	8002362 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3314      	adds	r3, #20
 8002360:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	795b      	ldrb	r3, [r3, #5]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_DAC_ConfigChannel+0x18>
 800238c:	2302      	movs	r3, #2
 800238e:	e03c      	b.n	800240a <HAL_DAC_ConfigChannel+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2202      	movs	r2, #2
 800239a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	22c0      	movs	r2, #192	; 0xc0
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e165      	b.n	8002700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8154 	bne.w	80026fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80ae 	beq.w	80026fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_GPIO_Init+0x300>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_GPIO_Init+0x300>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_GPIO_Init+0x300>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_GPIO_Init+0x304>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <HAL_GPIO_Init+0x308>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_Init+0x21a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_GPIO_Init+0x30c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_Init+0x216>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_GPIO_Init+0x310>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x212>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_GPIO_Init+0x314>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_GPIO_Init+0x318>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x20a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_GPIO_Init+0x31c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x206>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <HAL_GPIO_Init+0x320>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x202>
 8002616:	2306      	movs	r3, #6
 8002618:	e00c      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800261a:	2307      	movs	r3, #7
 800261c:	e00a      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800261e:	2305      	movs	r3, #5
 8002620:	e008      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002622:	2304      	movs	r3, #4
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002626:	2303      	movs	r3, #3
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002632:	2300      	movs	r3, #0
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002644:	4935      	ldr	r1, [pc, #212]	; (800271c <HAL_GPIO_Init+0x304>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002652:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_GPIO_Init+0x324>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002676:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_GPIO_Init+0x324>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_GPIO_Init+0x324>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <HAL_GPIO_Init+0x324>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_GPIO_Init+0x324>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_GPIO_Init+0x324>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HAL_GPIO_Init+0x324>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_GPIO_Init+0x324>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	f67f ae96 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40013800 	.word	0x40013800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40021400 	.word	0x40021400
 8002738:	40021800 	.word	0x40021800
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0cc      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d90c      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d044      	beq.n	8002894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d119      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d003      	beq.n	8002832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b3f      	ldr	r3, [pc, #252]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e067      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4934      	ldr	r1, [pc, #208]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7fe fffe 	bl	8001864 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fffa 	bl	8001864 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e04f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 020c 	and.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1eb      	bne.n	800286c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d20c      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f855 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe ff5e 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00
 8002930:	40023800 	.word	0x40023800
 8002934:	08004a68 	.word	0x08004a68
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800295c:	f7ff fff0 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08004a78 	.word	0x08004a78

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002984:	f7ff ffdc 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0b5b      	lsrs	r3, r3, #13
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08004a78 	.word	0x08004a78

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c4:	4bce      	ldr	r3, [pc, #824]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	f200 818d 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x344>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	08002a0d 	.word	0x08002a0d
 80029dc:	08002ced 	.word	0x08002ced
 80029e0:	08002ced 	.word	0x08002ced
 80029e4:	08002ced 	.word	0x08002ced
 80029e8:	08002a13 	.word	0x08002a13
 80029ec:	08002ced 	.word	0x08002ced
 80029f0:	08002ced 	.word	0x08002ced
 80029f4:	08002ced 	.word	0x08002ced
 80029f8:	08002a19 	.word	0x08002a19
 80029fc:	08002ced 	.word	0x08002ced
 8002a00:	08002ced 	.word	0x08002ced
 8002a04:	08002ced 	.word	0x08002ced
 8002a08:	08002b8d 	.word	0x08002b8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4bbd      	ldr	r3, [pc, #756]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a0e:	61bb      	str	r3, [r7, #24]
       break;
 8002a10:	e16f      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a12:	4bbd      	ldr	r3, [pc, #756]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x360>)
 8002a14:	61bb      	str	r3, [r7, #24]
      break;
 8002a16:	e16c      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a18:	4bb9      	ldr	r3, [pc, #740]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a22:	4bb7      	ldr	r3, [pc, #732]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d053      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2e:	4bb4      	ldr	r3, [pc, #720]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	461a      	mov	r2, r3
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	ea02 0400 	and.w	r4, r2, r0
 8002a46:	603c      	str	r4, [r7, #0]
 8002a48:	400b      	ands	r3, r1
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	014b      	lsls	r3, r1, #5
 8002a5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a62:	0142      	lsls	r2, r0, #5
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	1ac0      	subs	r0, r0, r3
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	eb61 0103 	sbc.w	r1, r1, r3
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a80:	0182      	lsls	r2, r0, #6
 8002a82:	1a12      	subs	r2, r2, r0
 8002a84:	eb63 0301 	sbc.w	r3, r3, r1
 8002a88:	f04f 0000 	mov.w	r0, #0
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	00d9      	lsls	r1, r3, #3
 8002a92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a96:	00d0      	lsls	r0, r2, #3
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	1852      	adds	r2, r2, r1
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb43 0101 	adc.w	r1, r3, r1
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	0259      	lsls	r1, r3, #9
 8002ab2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ab6:	0250      	lsls	r0, r2, #9
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	f7fe f87a 	bl	8000bc0 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	e04c      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	461a      	mov	r2, r3
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	ea02 0a00 	and.w	sl, r2, r0
 8002aee:	ea03 0b01 	and.w	fp, r3, r1
 8002af2:	4650      	mov	r0, sl
 8002af4:	4659      	mov	r1, fp
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	014b      	lsls	r3, r1, #5
 8002b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b04:	0142      	lsls	r2, r0, #5
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	ebb0 000a 	subs.w	r0, r0, sl
 8002b0e:	eb61 010b 	sbc.w	r1, r1, fp
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	018b      	lsls	r3, r1, #6
 8002b1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b20:	0182      	lsls	r2, r0, #6
 8002b22:	1a12      	subs	r2, r2, r0
 8002b24:	eb63 0301 	sbc.w	r3, r3, r1
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	00d9      	lsls	r1, r3, #3
 8002b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b36:	00d0      	lsls	r0, r2, #3
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	eb12 020a 	adds.w	r2, r2, sl
 8002b40:	eb43 030b 	adc.w	r3, r3, fp
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0299      	lsls	r1, r3, #10
 8002b4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b52:	0290      	lsls	r0, r2, #10
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	f7fe f82c 	bl	8000bc0 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	61bb      	str	r3, [r7, #24]
      break;
 8002b8a:	e0b2      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04d      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	ea02 0800 	and.w	r8, r2, r0
 8002bba:	ea03 0901 	and.w	r9, r3, r1
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	014b      	lsls	r3, r1, #5
 8002bcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bd0:	0142      	lsls	r2, r0, #5
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	ebb0 0008 	subs.w	r0, r0, r8
 8002bda:	eb61 0109 	sbc.w	r1, r1, r9
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bec:	0182      	lsls	r2, r0, #6
 8002bee:	1a12      	subs	r2, r2, r0
 8002bf0:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	00d9      	lsls	r1, r3, #3
 8002bfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c02:	00d0      	lsls	r0, r2, #3
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	eb12 0208 	adds.w	r2, r2, r8
 8002c0c:	eb43 0309 	adc.w	r3, r3, r9
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0259      	lsls	r1, r3, #9
 8002c1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c1e:	0250      	lsls	r0, r2, #9
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	f7fd ffc6 	bl	8000bc0 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e04a      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	461a      	mov	r2, r3
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	ea02 0400 	and.w	r4, r2, r0
 8002c56:	ea03 0501 	and.w	r5, r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	014b      	lsls	r3, r1, #5
 8002c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c6c:	0142      	lsls	r2, r0, #5
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	1b00      	subs	r0, r0, r4
 8002c74:	eb61 0105 	sbc.w	r1, r1, r5
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	018b      	lsls	r3, r1, #6
 8002c82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c86:	0182      	lsls	r2, r0, #6
 8002c88:	1a12      	subs	r2, r2, r0
 8002c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	00d9      	lsls	r1, r3, #3
 8002c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c9c:	00d0      	lsls	r0, r2, #3
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	1912      	adds	r2, r2, r4
 8002ca4:	eb45 0303 	adc.w	r3, r5, r3
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	0299      	lsls	r1, r3, #10
 8002cb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cb6:	0290      	lsls	r0, r2, #10
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f7fd ff7a 	bl	8000bc0 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0f1b      	lsrs	r3, r3, #28
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	61bb      	str	r3, [r7, #24]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cee:	61bb      	str	r3, [r7, #24]
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e28d      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8083 	beq.w	8002e32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d2c:	4b94      	ldr	r3, [pc, #592]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d38:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d44:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d50:	d00c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d112      	bne.n	8002d84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x124>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d157      	bne.n	8002e30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e25a      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x90>
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7b      	ldr	r2, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xcc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xb4>
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a75      	ldr	r2, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a72      	ldr	r2, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xcc>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6b      	ldr	r2, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fd40 	bl	8001864 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fd3c 	bl	8001864 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e21f      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xdc>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fd2c 	bl	8001864 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fd28 	bl	8001864 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e20b      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x104>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06f      	beq.n	8002f1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3e:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d017      	beq.n	8002e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x186>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1d3      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4937      	ldr	r1, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fcd5 	bl	8001864 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fcd1 	bl	8001864 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1b4      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4925      	ldr	r1, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fcb4 	bl	8001864 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fcb0 	bl	8001864 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e193      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d036      	beq.n	8002f98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fc94 	bl	8001864 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe fc90 	bl	8001864 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e173      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x234>
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe fc7d 	bl	8001864 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	e00e      	b.n	8002f8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fc79 	bl	8001864 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d907      	bls.n	8002f8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e15c      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b8a      	ldr	r3, [pc, #552]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ea      	bne.n	8002f6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8097 	beq.w	80030d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b79      	ldr	r3, [pc, #484]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fc39 	bl	8001864 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe fc35 	bl	8001864 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e118      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x31e>
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	e01c      	b.n	8003064 <HAL_RCC_OscConfig+0x358>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x340>
 8003032:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
 800303e:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x358>
 800304c:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a59      	ldr	r2, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fbfa 	bl	8001864 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe fbf6 	bl	8001864 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0d7      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ee      	beq.n	8003074 <HAL_RCC_OscConfig+0x368>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fbe4 	bl	8001864 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fbe0 	bl	8001864 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0c1      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ee      	bne.n	80030a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80ad 	beq.w	8003238 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d060      	beq.n	80031ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d145      	bne.n	800317e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fbb4 	bl	8001864 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fbb0 	bl	8001864 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e093      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	019b      	lsls	r3, r3, #6
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	3b01      	subs	r3, #1
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	491b      	ldr	r1, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fb85 	bl	8001864 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe fb81 	bl	8001864 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e064      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x452>
 800317c:	e05c      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fb6e 	bl	8001864 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe fb6a 	bl	8001864 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04d      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x480>
 80031aa:	e045      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e040      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000
 80031c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_RCC_OscConfig+0x538>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d030      	beq.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d129      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d122      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d119      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d10f      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03f      	b.n	80032da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe f9e4 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f829 	bl	80032e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	b09f      	sub	sp, #124	; 0x7c
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	68d9      	ldr	r1, [r3, #12]
 80032fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	ea40 0301 	orr.w	r3, r0, r1
 8003304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	431a      	orrs	r2, r3
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4313      	orrs	r3, r2
 800331c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003328:	f021 010c 	bic.w	r1, r1, #12
 800332c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003332:	430b      	orrs	r3, r1
 8003334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003342:	6999      	ldr	r1, [r3, #24]
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	ea40 0301 	orr.w	r3, r0, r1
 800334c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800334e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4bc5      	ldr	r3, [pc, #788]	; (8003668 <UART_SetConfig+0x384>)
 8003354:	429a      	cmp	r2, r3
 8003356:	d004      	beq.n	8003362 <UART_SetConfig+0x7e>
 8003358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4bc3      	ldr	r3, [pc, #780]	; (800366c <UART_SetConfig+0x388>)
 800335e:	429a      	cmp	r2, r3
 8003360:	d103      	bne.n	800336a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003362:	f7ff fb0d 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8003366:	6778      	str	r0, [r7, #116]	; 0x74
 8003368:	e002      	b.n	8003370 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800336a:	f7ff faf5 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 800336e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003378:	f040 80b6 	bne.w	80034e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800337c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337e:	461c      	mov	r4, r3
 8003380:	f04f 0500 	mov.w	r5, #0
 8003384:	4622      	mov	r2, r4
 8003386:	462b      	mov	r3, r5
 8003388:	1891      	adds	r1, r2, r2
 800338a:	6439      	str	r1, [r7, #64]	; 0x40
 800338c:	415b      	adcs	r3, r3
 800338e:	647b      	str	r3, [r7, #68]	; 0x44
 8003390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003394:	1912      	adds	r2, r2, r4
 8003396:	eb45 0303 	adc.w	r3, r5, r3
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	00d9      	lsls	r1, r3, #3
 80033a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a8:	00d0      	lsls	r0, r2, #3
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	1911      	adds	r1, r2, r4
 80033b0:	6639      	str	r1, [r7, #96]	; 0x60
 80033b2:	416b      	adcs	r3, r5
 80033b4:	667b      	str	r3, [r7, #100]	; 0x64
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033c4:	415b      	adcs	r3, r3
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80033d0:	f7fd fbf6 	bl	8000bc0 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4ba5      	ldr	r3, [pc, #660]	; (8003670 <UART_SetConfig+0x38c>)
 80033da:	fba3 2302 	umull	r2, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	011e      	lsls	r6, r3, #4
 80033e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e4:	461c      	mov	r4, r3
 80033e6:	f04f 0500 	mov.w	r5, #0
 80033ea:	4622      	mov	r2, r4
 80033ec:	462b      	mov	r3, r5
 80033ee:	1891      	adds	r1, r2, r2
 80033f0:	6339      	str	r1, [r7, #48]	; 0x30
 80033f2:	415b      	adcs	r3, r3
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
 80033f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033fa:	1912      	adds	r2, r2, r4
 80033fc:	eb45 0303 	adc.w	r3, r5, r3
 8003400:	f04f 0000 	mov.w	r0, #0
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	00d9      	lsls	r1, r3, #3
 800340a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800340e:	00d0      	lsls	r0, r2, #3
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	1911      	adds	r1, r2, r4
 8003416:	65b9      	str	r1, [r7, #88]	; 0x58
 8003418:	416b      	adcs	r3, r5
 800341a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	461a      	mov	r2, r3
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	1891      	adds	r1, r2, r2
 8003428:	62b9      	str	r1, [r7, #40]	; 0x28
 800342a:	415b      	adcs	r3, r3
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003432:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003436:	f7fd fbc3 	bl	8000bc0 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <UART_SetConfig+0x38c>)
 8003440:	fba3 1302 	umull	r1, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	2164      	movs	r1, #100	; 0x64
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	3332      	adds	r3, #50	; 0x32
 8003452:	4a87      	ldr	r2, [pc, #540]	; (8003670 <UART_SetConfig+0x38c>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003460:	441e      	add	r6, r3
 8003462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003464:	4618      	mov	r0, r3
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	1894      	adds	r4, r2, r2
 8003470:	623c      	str	r4, [r7, #32]
 8003472:	415b      	adcs	r3, r3
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
 8003476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347a:	1812      	adds	r2, r2, r0
 800347c:	eb41 0303 	adc.w	r3, r1, r3
 8003480:	f04f 0400 	mov.w	r4, #0
 8003484:	f04f 0500 	mov.w	r5, #0
 8003488:	00dd      	lsls	r5, r3, #3
 800348a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800348e:	00d4      	lsls	r4, r2, #3
 8003490:	4622      	mov	r2, r4
 8003492:	462b      	mov	r3, r5
 8003494:	1814      	adds	r4, r2, r0
 8003496:	653c      	str	r4, [r7, #80]	; 0x50
 8003498:	414b      	adcs	r3, r1
 800349a:	657b      	str	r3, [r7, #84]	; 0x54
 800349c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	1891      	adds	r1, r2, r2
 80034a8:	61b9      	str	r1, [r7, #24]
 80034aa:	415b      	adcs	r3, r3
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80034b6:	f7fd fb83 	bl	8000bc0 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <UART_SetConfig+0x38c>)
 80034c0:	fba3 1302 	umull	r1, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	2164      	movs	r1, #100	; 0x64
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	3332      	adds	r3, #50	; 0x32
 80034d2:	4a67      	ldr	r2, [pc, #412]	; (8003670 <UART_SetConfig+0x38c>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	f003 0207 	and.w	r2, r3, #7
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4432      	add	r2, r6
 80034e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e6:	e0b9      	b.n	800365c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ea:	461c      	mov	r4, r3
 80034ec:	f04f 0500 	mov.w	r5, #0
 80034f0:	4622      	mov	r2, r4
 80034f2:	462b      	mov	r3, r5
 80034f4:	1891      	adds	r1, r2, r2
 80034f6:	6139      	str	r1, [r7, #16]
 80034f8:	415b      	adcs	r3, r3
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003500:	1912      	adds	r2, r2, r4
 8003502:	eb45 0303 	adc.w	r3, r5, r3
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	00d9      	lsls	r1, r3, #3
 8003510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003514:	00d0      	lsls	r0, r2, #3
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	eb12 0804 	adds.w	r8, r2, r4
 800351e:	eb43 0905 	adc.w	r9, r3, r5
 8003522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4618      	mov	r0, r3
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	008b      	lsls	r3, r1, #2
 8003536:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800353a:	0082      	lsls	r2, r0, #2
 800353c:	4640      	mov	r0, r8
 800353e:	4649      	mov	r1, r9
 8003540:	f7fd fb3e 	bl	8000bc0 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4b49      	ldr	r3, [pc, #292]	; (8003670 <UART_SetConfig+0x38c>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	011e      	lsls	r6, r3, #4
 8003552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003554:	4618      	mov	r0, r3
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	1894      	adds	r4, r2, r2
 8003560:	60bc      	str	r4, [r7, #8]
 8003562:	415b      	adcs	r3, r3
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800356a:	1812      	adds	r2, r2, r0
 800356c:	eb41 0303 	adc.w	r3, r1, r3
 8003570:	f04f 0400 	mov.w	r4, #0
 8003574:	f04f 0500 	mov.w	r5, #0
 8003578:	00dd      	lsls	r5, r3, #3
 800357a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800357e:	00d4      	lsls	r4, r2, #3
 8003580:	4622      	mov	r2, r4
 8003582:	462b      	mov	r3, r5
 8003584:	1814      	adds	r4, r2, r0
 8003586:	64bc      	str	r4, [r7, #72]	; 0x48
 8003588:	414b      	adcs	r3, r1
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	008b      	lsls	r3, r1, #2
 80035a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035a4:	0082      	lsls	r2, r0, #2
 80035a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035aa:	f7fd fb09 	bl	8000bc0 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <UART_SetConfig+0x38c>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	; 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	3332      	adds	r3, #50	; 0x32
 80035c6:	4a2a      	ldr	r2, [pc, #168]	; (8003670 <UART_SetConfig+0x38c>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d2:	441e      	add	r6, r3
 80035d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d6:	4618      	mov	r0, r3
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	1894      	adds	r4, r2, r2
 80035e2:	603c      	str	r4, [r7, #0]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035ec:	1812      	adds	r2, r2, r0
 80035ee:	eb41 0303 	adc.w	r3, r1, r3
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	f04f 0500 	mov.w	r5, #0
 80035fa:	00dd      	lsls	r5, r3, #3
 80035fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003600:	00d4      	lsls	r4, r2, #3
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	eb12 0a00 	adds.w	sl, r2, r0
 800360a:	eb43 0b01 	adc.w	fp, r3, r1
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003626:	0082      	lsls	r2, r0, #2
 8003628:	4650      	mov	r0, sl
 800362a:	4659      	mov	r1, fp
 800362c:	f7fd fac8 	bl	8000bc0 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <UART_SetConfig+0x38c>)
 8003636:	fba3 1302 	umull	r1, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2164      	movs	r1, #100	; 0x64
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a09      	ldr	r2, [pc, #36]	; (8003670 <UART_SetConfig+0x38c>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4432      	add	r2, r6
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	377c      	adds	r7, #124	; 0x7c
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	51eb851f 	.word	0x51eb851f

08003674 <__errno>:
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <__errno+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	2000000c 	.word	0x2000000c

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	4d0d      	ldr	r5, [pc, #52]	; (80036b8 <__libc_init_array+0x38>)
 8003684:	4c0d      	ldr	r4, [pc, #52]	; (80036bc <__libc_init_array+0x3c>)
 8003686:	1b64      	subs	r4, r4, r5
 8003688:	10a4      	asrs	r4, r4, #2
 800368a:	2600      	movs	r6, #0
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	4d0b      	ldr	r5, [pc, #44]	; (80036c0 <__libc_init_array+0x40>)
 8003692:	4c0c      	ldr	r4, [pc, #48]	; (80036c4 <__libc_init_array+0x44>)
 8003694:	f001 f9da 	bl	8004a4c <_init>
 8003698:	1b64      	subs	r4, r4, r5
 800369a:	10a4      	asrs	r4, r4, #2
 800369c:	2600      	movs	r6, #0
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08004ad0 	.word	0x08004ad0
 80036bc:	08004ad0 	.word	0x08004ad0
 80036c0:	08004ad0 	.word	0x08004ad0
 80036c4:	08004ad4 	.word	0x08004ad4

080036c8 <memset>:
 80036c8:	4402      	add	r2, r0
 80036ca:	4603      	mov	r3, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <log>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	ed2d 8b02 	vpush	{d8}
 80036de:	ec55 4b10 	vmov	r4, r5, d0
 80036e2:	f000 f8f1 	bl	80038c8 <__ieee754_log>
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <log+0x88>)
 80036e8:	eeb0 8a40 	vmov.f32	s16, s0
 80036ec:	eef0 8a60 	vmov.f32	s17, s1
 80036f0:	f993 3000 	ldrsb.w	r3, [r3]
 80036f4:	3301      	adds	r3, #1
 80036f6:	d01a      	beq.n	800372e <log+0x56>
 80036f8:	4622      	mov	r2, r4
 80036fa:	462b      	mov	r3, r5
 80036fc:	4620      	mov	r0, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	f7fd f9d8 	bl	8000ab4 <__aeabi_dcmpun>
 8003704:	b998      	cbnz	r0, 800372e <log+0x56>
 8003706:	2200      	movs	r2, #0
 8003708:	2300      	movs	r3, #0
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fd f9c7 	bl	8000aa0 <__aeabi_dcmpgt>
 8003712:	b960      	cbnz	r0, 800372e <log+0x56>
 8003714:	2200      	movs	r2, #0
 8003716:	2300      	movs	r3, #0
 8003718:	4620      	mov	r0, r4
 800371a:	4629      	mov	r1, r5
 800371c:	f7fd f998 	bl	8000a50 <__aeabi_dcmpeq>
 8003720:	b160      	cbz	r0, 800373c <log+0x64>
 8003722:	f7ff ffa7 	bl	8003674 <__errno>
 8003726:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8003758 <log+0x80>
 800372a:	2322      	movs	r3, #34	; 0x22
 800372c:	6003      	str	r3, [r0, #0]
 800372e:	eeb0 0a48 	vmov.f32	s0, s16
 8003732:	eef0 0a68 	vmov.f32	s1, s17
 8003736:	ecbd 8b02 	vpop	{d8}
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	f7ff ff9a 	bl	8003674 <__errno>
 8003740:	ecbd 8b02 	vpop	{d8}
 8003744:	2321      	movs	r3, #33	; 0x21
 8003746:	6003      	str	r3, [r0, #0]
 8003748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800374c:	4805      	ldr	r0, [pc, #20]	; (8003764 <log+0x8c>)
 800374e:	f001 b863 	b.w	8004818 <nan>
 8003752:	bf00      	nop
 8003754:	f3af 8000 	nop.w
 8003758:	00000000 	.word	0x00000000
 800375c:	fff00000 	.word	0xfff00000
 8003760:	20000070 	.word	0x20000070
 8003764:	08004a80 	.word	0x08004a80

08003768 <pow>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	ec59 8b10 	vmov	r8, r9, d0
 8003770:	ec57 6b11 	vmov	r6, r7, d1
 8003774:	f000 fa64 	bl	8003c40 <__ieee754_pow>
 8003778:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <pow+0x14c>)
 800377a:	f993 3000 	ldrsb.w	r3, [r3]
 800377e:	3301      	adds	r3, #1
 8003780:	ec55 4b10 	vmov	r4, r5, d0
 8003784:	d015      	beq.n	80037b2 <pow+0x4a>
 8003786:	4632      	mov	r2, r6
 8003788:	463b      	mov	r3, r7
 800378a:	4630      	mov	r0, r6
 800378c:	4639      	mov	r1, r7
 800378e:	f7fd f991 	bl	8000ab4 <__aeabi_dcmpun>
 8003792:	b970      	cbnz	r0, 80037b2 <pow+0x4a>
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	4640      	mov	r0, r8
 800379a:	4649      	mov	r1, r9
 800379c:	f7fd f98a 	bl	8000ab4 <__aeabi_dcmpun>
 80037a0:	2200      	movs	r2, #0
 80037a2:	2300      	movs	r3, #0
 80037a4:	b148      	cbz	r0, 80037ba <pow+0x52>
 80037a6:	4630      	mov	r0, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	f7fd f951 	bl	8000a50 <__aeabi_dcmpeq>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d17d      	bne.n	80038ae <pow+0x146>
 80037b2:	ec45 4b10 	vmov	d0, r4, r5
 80037b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ba:	4640      	mov	r0, r8
 80037bc:	4649      	mov	r1, r9
 80037be:	f7fd f947 	bl	8000a50 <__aeabi_dcmpeq>
 80037c2:	b1e0      	cbz	r0, 80037fe <pow+0x96>
 80037c4:	2200      	movs	r2, #0
 80037c6:	2300      	movs	r3, #0
 80037c8:	4630      	mov	r0, r6
 80037ca:	4639      	mov	r1, r7
 80037cc:	f7fd f940 	bl	8000a50 <__aeabi_dcmpeq>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d16c      	bne.n	80038ae <pow+0x146>
 80037d4:	ec47 6b10 	vmov	d0, r6, r7
 80037d8:	f001 f811 	bl	80047fe <finite>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d0e8      	beq.n	80037b2 <pow+0x4a>
 80037e0:	2200      	movs	r2, #0
 80037e2:	2300      	movs	r3, #0
 80037e4:	4630      	mov	r0, r6
 80037e6:	4639      	mov	r1, r7
 80037e8:	f7fd f93c 	bl	8000a64 <__aeabi_dcmplt>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d0e0      	beq.n	80037b2 <pow+0x4a>
 80037f0:	f7ff ff40 	bl	8003674 <__errno>
 80037f4:	2321      	movs	r3, #33	; 0x21
 80037f6:	6003      	str	r3, [r0, #0]
 80037f8:	2400      	movs	r4, #0
 80037fa:	4d2f      	ldr	r5, [pc, #188]	; (80038b8 <pow+0x150>)
 80037fc:	e7d9      	b.n	80037b2 <pow+0x4a>
 80037fe:	ec45 4b10 	vmov	d0, r4, r5
 8003802:	f000 fffc 	bl	80047fe <finite>
 8003806:	bbb8      	cbnz	r0, 8003878 <pow+0x110>
 8003808:	ec49 8b10 	vmov	d0, r8, r9
 800380c:	f000 fff7 	bl	80047fe <finite>
 8003810:	b390      	cbz	r0, 8003878 <pow+0x110>
 8003812:	ec47 6b10 	vmov	d0, r6, r7
 8003816:	f000 fff2 	bl	80047fe <finite>
 800381a:	b368      	cbz	r0, 8003878 <pow+0x110>
 800381c:	4622      	mov	r2, r4
 800381e:	462b      	mov	r3, r5
 8003820:	4620      	mov	r0, r4
 8003822:	4629      	mov	r1, r5
 8003824:	f7fd f946 	bl	8000ab4 <__aeabi_dcmpun>
 8003828:	b160      	cbz	r0, 8003844 <pow+0xdc>
 800382a:	f7ff ff23 	bl	8003674 <__errno>
 800382e:	2321      	movs	r3, #33	; 0x21
 8003830:	6003      	str	r3, [r0, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	2300      	movs	r3, #0
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fc ffcb 	bl	80007d4 <__aeabi_ddiv>
 800383e:	4604      	mov	r4, r0
 8003840:	460d      	mov	r5, r1
 8003842:	e7b6      	b.n	80037b2 <pow+0x4a>
 8003844:	f7ff ff16 	bl	8003674 <__errno>
 8003848:	2322      	movs	r3, #34	; 0x22
 800384a:	6003      	str	r3, [r0, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	2300      	movs	r3, #0
 8003850:	4640      	mov	r0, r8
 8003852:	4649      	mov	r1, r9
 8003854:	f7fd f906 	bl	8000a64 <__aeabi_dcmplt>
 8003858:	2400      	movs	r4, #0
 800385a:	b158      	cbz	r0, 8003874 <pow+0x10c>
 800385c:	ec47 6b10 	vmov	d0, r6, r7
 8003860:	f000 ffe2 	bl	8004828 <rint>
 8003864:	4632      	mov	r2, r6
 8003866:	ec51 0b10 	vmov	r0, r1, d0
 800386a:	463b      	mov	r3, r7
 800386c:	f7fd f8f0 	bl	8000a50 <__aeabi_dcmpeq>
 8003870:	2800      	cmp	r0, #0
 8003872:	d0c2      	beq.n	80037fa <pow+0x92>
 8003874:	4d11      	ldr	r5, [pc, #68]	; (80038bc <pow+0x154>)
 8003876:	e79c      	b.n	80037b2 <pow+0x4a>
 8003878:	2200      	movs	r2, #0
 800387a:	2300      	movs	r3, #0
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	f7fd f8e6 	bl	8000a50 <__aeabi_dcmpeq>
 8003884:	2800      	cmp	r0, #0
 8003886:	d094      	beq.n	80037b2 <pow+0x4a>
 8003888:	ec49 8b10 	vmov	d0, r8, r9
 800388c:	f000 ffb7 	bl	80047fe <finite>
 8003890:	2800      	cmp	r0, #0
 8003892:	d08e      	beq.n	80037b2 <pow+0x4a>
 8003894:	ec47 6b10 	vmov	d0, r6, r7
 8003898:	f000 ffb1 	bl	80047fe <finite>
 800389c:	2800      	cmp	r0, #0
 800389e:	d088      	beq.n	80037b2 <pow+0x4a>
 80038a0:	f7ff fee8 	bl	8003674 <__errno>
 80038a4:	2322      	movs	r3, #34	; 0x22
 80038a6:	6003      	str	r3, [r0, #0]
 80038a8:	2400      	movs	r4, #0
 80038aa:	2500      	movs	r5, #0
 80038ac:	e781      	b.n	80037b2 <pow+0x4a>
 80038ae:	4d04      	ldr	r5, [pc, #16]	; (80038c0 <pow+0x158>)
 80038b0:	2400      	movs	r4, #0
 80038b2:	e77e      	b.n	80037b2 <pow+0x4a>
 80038b4:	20000070 	.word	0x20000070
 80038b8:	fff00000 	.word	0xfff00000
 80038bc:	7ff00000 	.word	0x7ff00000
 80038c0:	3ff00000 	.word	0x3ff00000
 80038c4:	00000000 	.word	0x00000000

080038c8 <__ieee754_log>:
 80038c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038cc:	ec51 0b10 	vmov	r0, r1, d0
 80038d0:	ed2d 8b04 	vpush	{d8-d9}
 80038d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80038d8:	b083      	sub	sp, #12
 80038da:	460d      	mov	r5, r1
 80038dc:	da29      	bge.n	8003932 <__ieee754_log+0x6a>
 80038de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038e2:	4303      	orrs	r3, r0
 80038e4:	ee10 2a10 	vmov	r2, s0
 80038e8:	d10c      	bne.n	8003904 <__ieee754_log+0x3c>
 80038ea:	49cf      	ldr	r1, [pc, #828]	; (8003c28 <__ieee754_log+0x360>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	2300      	movs	r3, #0
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fc ff6f 	bl	80007d4 <__aeabi_ddiv>
 80038f6:	ec41 0b10 	vmov	d0, r0, r1
 80038fa:	b003      	add	sp, #12
 80038fc:	ecbd 8b04 	vpop	{d8-d9}
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	2900      	cmp	r1, #0
 8003906:	da05      	bge.n	8003914 <__ieee754_log+0x4c>
 8003908:	460b      	mov	r3, r1
 800390a:	f7fc fc81 	bl	8000210 <__aeabi_dsub>
 800390e:	2200      	movs	r2, #0
 8003910:	2300      	movs	r3, #0
 8003912:	e7ee      	b.n	80038f2 <__ieee754_log+0x2a>
 8003914:	4bc5      	ldr	r3, [pc, #788]	; (8003c2c <__ieee754_log+0x364>)
 8003916:	2200      	movs	r2, #0
 8003918:	f7fc fe32 	bl	8000580 <__aeabi_dmul>
 800391c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003920:	460d      	mov	r5, r1
 8003922:	4ac3      	ldr	r2, [pc, #780]	; (8003c30 <__ieee754_log+0x368>)
 8003924:	4295      	cmp	r5, r2
 8003926:	dd06      	ble.n	8003936 <__ieee754_log+0x6e>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	f7fc fc72 	bl	8000214 <__adddf3>
 8003930:	e7e1      	b.n	80038f6 <__ieee754_log+0x2e>
 8003932:	2300      	movs	r3, #0
 8003934:	e7f5      	b.n	8003922 <__ieee754_log+0x5a>
 8003936:	152c      	asrs	r4, r5, #20
 8003938:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800393c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003940:	441c      	add	r4, r3
 8003942:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003946:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800394a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003952:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003956:	ea42 0105 	orr.w	r1, r2, r5
 800395a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800395e:	2200      	movs	r2, #0
 8003960:	4bb4      	ldr	r3, [pc, #720]	; (8003c34 <__ieee754_log+0x36c>)
 8003962:	f7fc fc55 	bl	8000210 <__aeabi_dsub>
 8003966:	1cab      	adds	r3, r5, #2
 8003968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800396c:	2b02      	cmp	r3, #2
 800396e:	4682      	mov	sl, r0
 8003970:	468b      	mov	fp, r1
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	dc53      	bgt.n	8003a20 <__ieee754_log+0x158>
 8003978:	2300      	movs	r3, #0
 800397a:	f7fd f869 	bl	8000a50 <__aeabi_dcmpeq>
 800397e:	b1d0      	cbz	r0, 80039b6 <__ieee754_log+0xee>
 8003980:	2c00      	cmp	r4, #0
 8003982:	f000 8122 	beq.w	8003bca <__ieee754_log+0x302>
 8003986:	4620      	mov	r0, r4
 8003988:	f7fc fd90 	bl	80004ac <__aeabi_i2d>
 800398c:	a390      	add	r3, pc, #576	; (adr r3, 8003bd0 <__ieee754_log+0x308>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	4606      	mov	r6, r0
 8003994:	460f      	mov	r7, r1
 8003996:	f7fc fdf3 	bl	8000580 <__aeabi_dmul>
 800399a:	a38f      	add	r3, pc, #572	; (adr r3, 8003bd8 <__ieee754_log+0x310>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	4604      	mov	r4, r0
 80039a2:	460d      	mov	r5, r1
 80039a4:	4630      	mov	r0, r6
 80039a6:	4639      	mov	r1, r7
 80039a8:	f7fc fdea 	bl	8000580 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	e7ba      	b.n	800392c <__ieee754_log+0x64>
 80039b6:	a38a      	add	r3, pc, #552	; (adr r3, 8003be0 <__ieee754_log+0x318>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	4650      	mov	r0, sl
 80039be:	4659      	mov	r1, fp
 80039c0:	f7fc fdde 	bl	8000580 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	2000      	movs	r0, #0
 80039ca:	499b      	ldr	r1, [pc, #620]	; (8003c38 <__ieee754_log+0x370>)
 80039cc:	f7fc fc20 	bl	8000210 <__aeabi_dsub>
 80039d0:	4652      	mov	r2, sl
 80039d2:	4606      	mov	r6, r0
 80039d4:	460f      	mov	r7, r1
 80039d6:	465b      	mov	r3, fp
 80039d8:	4650      	mov	r0, sl
 80039da:	4659      	mov	r1, fp
 80039dc:	f7fc fdd0 	bl	8000580 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4630      	mov	r0, r6
 80039e6:	4639      	mov	r1, r7
 80039e8:	f7fc fdca 	bl	8000580 <__aeabi_dmul>
 80039ec:	4606      	mov	r6, r0
 80039ee:	460f      	mov	r7, r1
 80039f0:	b914      	cbnz	r4, 80039f8 <__ieee754_log+0x130>
 80039f2:	4632      	mov	r2, r6
 80039f4:	463b      	mov	r3, r7
 80039f6:	e0a2      	b.n	8003b3e <__ieee754_log+0x276>
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7fc fd57 	bl	80004ac <__aeabi_i2d>
 80039fe:	a374      	add	r3, pc, #464	; (adr r3, 8003bd0 <__ieee754_log+0x308>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	4680      	mov	r8, r0
 8003a06:	4689      	mov	r9, r1
 8003a08:	f7fc fdba 	bl	8000580 <__aeabi_dmul>
 8003a0c:	a372      	add	r3, pc, #456	; (adr r3, 8003bd8 <__ieee754_log+0x310>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	4604      	mov	r4, r0
 8003a14:	460d      	mov	r5, r1
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	f7fc fdb1 	bl	8000580 <__aeabi_dmul>
 8003a1e:	e0a7      	b.n	8003b70 <__ieee754_log+0x2a8>
 8003a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a24:	f7fc fbf6 	bl	8000214 <__adddf3>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	4659      	mov	r1, fp
 8003a30:	f7fc fed0 	bl	80007d4 <__aeabi_ddiv>
 8003a34:	ec41 0b18 	vmov	d8, r0, r1
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fc fd37 	bl	80004ac <__aeabi_i2d>
 8003a3e:	ec53 2b18 	vmov	r2, r3, d8
 8003a42:	ec41 0b19 	vmov	d9, r0, r1
 8003a46:	ec51 0b18 	vmov	r0, r1, d8
 8003a4a:	f7fc fd99 	bl	8000580 <__aeabi_dmul>
 8003a4e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003a52:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	4689      	mov	r9, r1
 8003a60:	f7fc fd8e 	bl	8000580 <__aeabi_dmul>
 8003a64:	a360      	add	r3, pc, #384	; (adr r3, 8003be8 <__ieee754_log+0x320>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	f7fc fd87 	bl	8000580 <__aeabi_dmul>
 8003a72:	a35f      	add	r3, pc, #380	; (adr r3, 8003bf0 <__ieee754_log+0x328>)
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f7fc fbcc 	bl	8000214 <__adddf3>
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	463b      	mov	r3, r7
 8003a80:	f7fc fd7e 	bl	8000580 <__aeabi_dmul>
 8003a84:	a35c      	add	r3, pc, #368	; (adr r3, 8003bf8 <__ieee754_log+0x330>)
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f7fc fbc3 	bl	8000214 <__adddf3>
 8003a8e:	4632      	mov	r2, r6
 8003a90:	463b      	mov	r3, r7
 8003a92:	f7fc fd75 	bl	8000580 <__aeabi_dmul>
 8003a96:	a35a      	add	r3, pc, #360	; (adr r3, 8003c00 <__ieee754_log+0x338>)
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f7fc fbba 	bl	8000214 <__adddf3>
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f7fc fd6c 	bl	8000580 <__aeabi_dmul>
 8003aa8:	a357      	add	r3, pc, #348	; (adr r3, 8003c08 <__ieee754_log+0x340>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	4680      	mov	r8, r0
 8003ab0:	4689      	mov	r9, r1
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	f7fc fd63 	bl	8000580 <__aeabi_dmul>
 8003aba:	a355      	add	r3, pc, #340	; (adr r3, 8003c10 <__ieee754_log+0x348>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f7fc fba8 	bl	8000214 <__adddf3>
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	f7fc fd5a 	bl	8000580 <__aeabi_dmul>
 8003acc:	a352      	add	r3, pc, #328	; (adr r3, 8003c18 <__ieee754_log+0x350>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f7fc fb9f 	bl	8000214 <__adddf3>
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	463b      	mov	r3, r7
 8003ada:	f7fc fd51 	bl	8000580 <__aeabi_dmul>
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	f7fc fb95 	bl	8000214 <__adddf3>
 8003aea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003aee:	9b01      	ldr	r3, [sp, #4]
 8003af0:	3551      	adds	r5, #81	; 0x51
 8003af2:	431d      	orrs	r5, r3
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	4680      	mov	r8, r0
 8003af8:	4689      	mov	r9, r1
 8003afa:	dd48      	ble.n	8003b8e <__ieee754_log+0x2c6>
 8003afc:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <__ieee754_log+0x370>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	4650      	mov	r0, sl
 8003b02:	4659      	mov	r1, fp
 8003b04:	f7fc fd3c 	bl	8000580 <__aeabi_dmul>
 8003b08:	4652      	mov	r2, sl
 8003b0a:	465b      	mov	r3, fp
 8003b0c:	f7fc fd38 	bl	8000580 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4606      	mov	r6, r0
 8003b16:	460f      	mov	r7, r1
 8003b18:	4640      	mov	r0, r8
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	f7fc fb7a 	bl	8000214 <__adddf3>
 8003b20:	ec53 2b18 	vmov	r2, r3, d8
 8003b24:	f7fc fd2c 	bl	8000580 <__aeabi_dmul>
 8003b28:	4680      	mov	r8, r0
 8003b2a:	4689      	mov	r9, r1
 8003b2c:	b964      	cbnz	r4, 8003b48 <__ieee754_log+0x280>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4630      	mov	r0, r6
 8003b34:	4639      	mov	r1, r7
 8003b36:	f7fc fb6b 	bl	8000210 <__aeabi_dsub>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4650      	mov	r0, sl
 8003b40:	4659      	mov	r1, fp
 8003b42:	f7fc fb65 	bl	8000210 <__aeabi_dsub>
 8003b46:	e6d6      	b.n	80038f6 <__ieee754_log+0x2e>
 8003b48:	a321      	add	r3, pc, #132	; (adr r3, 8003bd0 <__ieee754_log+0x308>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	ec51 0b19 	vmov	r0, r1, d9
 8003b52:	f7fc fd15 	bl	8000580 <__aeabi_dmul>
 8003b56:	a320      	add	r3, pc, #128	; (adr r3, 8003bd8 <__ieee754_log+0x310>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	ec51 0b19 	vmov	r0, r1, d9
 8003b64:	f7fc fd0c 	bl	8000580 <__aeabi_dmul>
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f7fc fb52 	bl	8000214 <__adddf3>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4630      	mov	r0, r6
 8003b76:	4639      	mov	r1, r7
 8003b78:	f7fc fb4a 	bl	8000210 <__aeabi_dsub>
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	465b      	mov	r3, fp
 8003b80:	f7fc fb46 	bl	8000210 <__aeabi_dsub>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	e7d9      	b.n	8003b42 <__ieee754_log+0x27a>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4650      	mov	r0, sl
 8003b94:	4659      	mov	r1, fp
 8003b96:	f7fc fb3b 	bl	8000210 <__aeabi_dsub>
 8003b9a:	ec53 2b18 	vmov	r2, r3, d8
 8003b9e:	f7fc fcef 	bl	8000580 <__aeabi_dmul>
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	460f      	mov	r7, r1
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	f43f af23 	beq.w	80039f2 <__ieee754_log+0x12a>
 8003bac:	a308      	add	r3, pc, #32	; (adr r3, 8003bd0 <__ieee754_log+0x308>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	ec51 0b19 	vmov	r0, r1, d9
 8003bb6:	f7fc fce3 	bl	8000580 <__aeabi_dmul>
 8003bba:	a307      	add	r3, pc, #28	; (adr r3, 8003bd8 <__ieee754_log+0x310>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	460d      	mov	r5, r1
 8003bc4:	ec51 0b19 	vmov	r0, r1, d9
 8003bc8:	e727      	b.n	8003a1a <__ieee754_log+0x152>
 8003bca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003c20 <__ieee754_log+0x358>
 8003bce:	e694      	b.n	80038fa <__ieee754_log+0x32>
 8003bd0:	fee00000 	.word	0xfee00000
 8003bd4:	3fe62e42 	.word	0x3fe62e42
 8003bd8:	35793c76 	.word	0x35793c76
 8003bdc:	3dea39ef 	.word	0x3dea39ef
 8003be0:	55555555 	.word	0x55555555
 8003be4:	3fd55555 	.word	0x3fd55555
 8003be8:	df3e5244 	.word	0xdf3e5244
 8003bec:	3fc2f112 	.word	0x3fc2f112
 8003bf0:	96cb03de 	.word	0x96cb03de
 8003bf4:	3fc74664 	.word	0x3fc74664
 8003bf8:	94229359 	.word	0x94229359
 8003bfc:	3fd24924 	.word	0x3fd24924
 8003c00:	55555593 	.word	0x55555593
 8003c04:	3fe55555 	.word	0x3fe55555
 8003c08:	d078c69f 	.word	0xd078c69f
 8003c0c:	3fc39a09 	.word	0x3fc39a09
 8003c10:	1d8e78af 	.word	0x1d8e78af
 8003c14:	3fcc71c5 	.word	0x3fcc71c5
 8003c18:	9997fa04 	.word	0x9997fa04
 8003c1c:	3fd99999 	.word	0x3fd99999
	...
 8003c28:	c3500000 	.word	0xc3500000
 8003c2c:	43500000 	.word	0x43500000
 8003c30:	7fefffff 	.word	0x7fefffff
 8003c34:	3ff00000 	.word	0x3ff00000
 8003c38:	3fe00000 	.word	0x3fe00000
 8003c3c:	00000000 	.word	0x00000000

08003c40 <__ieee754_pow>:
 8003c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c44:	ed2d 8b06 	vpush	{d8-d10}
 8003c48:	b08d      	sub	sp, #52	; 0x34
 8003c4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003c4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8003c52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003c56:	ea56 0100 	orrs.w	r1, r6, r0
 8003c5a:	ec53 2b10 	vmov	r2, r3, d0
 8003c5e:	f000 84d1 	beq.w	8004604 <__ieee754_pow+0x9c4>
 8003c62:	497f      	ldr	r1, [pc, #508]	; (8003e60 <__ieee754_pow+0x220>)
 8003c64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003c68:	428c      	cmp	r4, r1
 8003c6a:	ee10 8a10 	vmov	r8, s0
 8003c6e:	4699      	mov	r9, r3
 8003c70:	dc09      	bgt.n	8003c86 <__ieee754_pow+0x46>
 8003c72:	d103      	bne.n	8003c7c <__ieee754_pow+0x3c>
 8003c74:	b97a      	cbnz	r2, 8003c96 <__ieee754_pow+0x56>
 8003c76:	42a6      	cmp	r6, r4
 8003c78:	dd02      	ble.n	8003c80 <__ieee754_pow+0x40>
 8003c7a:	e00c      	b.n	8003c96 <__ieee754_pow+0x56>
 8003c7c:	428e      	cmp	r6, r1
 8003c7e:	dc02      	bgt.n	8003c86 <__ieee754_pow+0x46>
 8003c80:	428e      	cmp	r6, r1
 8003c82:	d110      	bne.n	8003ca6 <__ieee754_pow+0x66>
 8003c84:	b178      	cbz	r0, 8003ca6 <__ieee754_pow+0x66>
 8003c86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c8e:	ea54 0308 	orrs.w	r3, r4, r8
 8003c92:	f000 84b7 	beq.w	8004604 <__ieee754_pow+0x9c4>
 8003c96:	4873      	ldr	r0, [pc, #460]	; (8003e64 <__ieee754_pow+0x224>)
 8003c98:	b00d      	add	sp, #52	; 0x34
 8003c9a:	ecbd 8b06 	vpop	{d8-d10}
 8003c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca2:	f000 bdb9 	b.w	8004818 <nan>
 8003ca6:	f1b9 0f00 	cmp.w	r9, #0
 8003caa:	da36      	bge.n	8003d1a <__ieee754_pow+0xda>
 8003cac:	496e      	ldr	r1, [pc, #440]	; (8003e68 <__ieee754_pow+0x228>)
 8003cae:	428e      	cmp	r6, r1
 8003cb0:	dc51      	bgt.n	8003d56 <__ieee754_pow+0x116>
 8003cb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8003cb6:	428e      	cmp	r6, r1
 8003cb8:	f340 84af 	ble.w	800461a <__ieee754_pow+0x9da>
 8003cbc:	1531      	asrs	r1, r6, #20
 8003cbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003cc2:	2914      	cmp	r1, #20
 8003cc4:	dd0f      	ble.n	8003ce6 <__ieee754_pow+0xa6>
 8003cc6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8003cca:	fa20 fc01 	lsr.w	ip, r0, r1
 8003cce:	fa0c f101 	lsl.w	r1, ip, r1
 8003cd2:	4281      	cmp	r1, r0
 8003cd4:	f040 84a1 	bne.w	800461a <__ieee754_pow+0x9da>
 8003cd8:	f00c 0c01 	and.w	ip, ip, #1
 8003cdc:	f1cc 0102 	rsb	r1, ip, #2
 8003ce0:	9100      	str	r1, [sp, #0]
 8003ce2:	b180      	cbz	r0, 8003d06 <__ieee754_pow+0xc6>
 8003ce4:	e059      	b.n	8003d9a <__ieee754_pow+0x15a>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d155      	bne.n	8003d96 <__ieee754_pow+0x156>
 8003cea:	f1c1 0114 	rsb	r1, r1, #20
 8003cee:	fa46 fc01 	asr.w	ip, r6, r1
 8003cf2:	fa0c f101 	lsl.w	r1, ip, r1
 8003cf6:	42b1      	cmp	r1, r6
 8003cf8:	f040 848c 	bne.w	8004614 <__ieee754_pow+0x9d4>
 8003cfc:	f00c 0c01 	and.w	ip, ip, #1
 8003d00:	f1cc 0102 	rsb	r1, ip, #2
 8003d04:	9100      	str	r1, [sp, #0]
 8003d06:	4959      	ldr	r1, [pc, #356]	; (8003e6c <__ieee754_pow+0x22c>)
 8003d08:	428e      	cmp	r6, r1
 8003d0a:	d12d      	bne.n	8003d68 <__ieee754_pow+0x128>
 8003d0c:	2f00      	cmp	r7, #0
 8003d0e:	da79      	bge.n	8003e04 <__ieee754_pow+0x1c4>
 8003d10:	4956      	ldr	r1, [pc, #344]	; (8003e6c <__ieee754_pow+0x22c>)
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fc fd5e 	bl	80007d4 <__aeabi_ddiv>
 8003d18:	e016      	b.n	8003d48 <__ieee754_pow+0x108>
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	9100      	str	r1, [sp, #0]
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d13b      	bne.n	8003d9a <__ieee754_pow+0x15a>
 8003d22:	494f      	ldr	r1, [pc, #316]	; (8003e60 <__ieee754_pow+0x220>)
 8003d24:	428e      	cmp	r6, r1
 8003d26:	d1ee      	bne.n	8003d06 <__ieee754_pow+0xc6>
 8003d28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d30:	ea53 0308 	orrs.w	r3, r3, r8
 8003d34:	f000 8466 	beq.w	8004604 <__ieee754_pow+0x9c4>
 8003d38:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <__ieee754_pow+0x230>)
 8003d3a:	429c      	cmp	r4, r3
 8003d3c:	dd0d      	ble.n	8003d5a <__ieee754_pow+0x11a>
 8003d3e:	2f00      	cmp	r7, #0
 8003d40:	f280 8464 	bge.w	800460c <__ieee754_pow+0x9cc>
 8003d44:	2000      	movs	r0, #0
 8003d46:	2100      	movs	r1, #0
 8003d48:	ec41 0b10 	vmov	d0, r0, r1
 8003d4c:	b00d      	add	sp, #52	; 0x34
 8003d4e:	ecbd 8b06 	vpop	{d8-d10}
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	2102      	movs	r1, #2
 8003d58:	e7e0      	b.n	8003d1c <__ieee754_pow+0xdc>
 8003d5a:	2f00      	cmp	r7, #0
 8003d5c:	daf2      	bge.n	8003d44 <__ieee754_pow+0x104>
 8003d5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8003d62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d66:	e7ef      	b.n	8003d48 <__ieee754_pow+0x108>
 8003d68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003d6c:	d104      	bne.n	8003d78 <__ieee754_pow+0x138>
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fc fc05 	bl	8000580 <__aeabi_dmul>
 8003d76:	e7e7      	b.n	8003d48 <__ieee754_pow+0x108>
 8003d78:	493e      	ldr	r1, [pc, #248]	; (8003e74 <__ieee754_pow+0x234>)
 8003d7a:	428f      	cmp	r7, r1
 8003d7c:	d10d      	bne.n	8003d9a <__ieee754_pow+0x15a>
 8003d7e:	f1b9 0f00 	cmp.w	r9, #0
 8003d82:	db0a      	blt.n	8003d9a <__ieee754_pow+0x15a>
 8003d84:	ec43 2b10 	vmov	d0, r2, r3
 8003d88:	b00d      	add	sp, #52	; 0x34
 8003d8a:	ecbd 8b06 	vpop	{d8-d10}
 8003d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d92:	f000 bc77 	b.w	8004684 <__ieee754_sqrt>
 8003d96:	2100      	movs	r1, #0
 8003d98:	9100      	str	r1, [sp, #0]
 8003d9a:	ec43 2b10 	vmov	d0, r2, r3
 8003d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003da2:	f000 fd23 	bl	80047ec <fabs>
 8003da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003daa:	ec51 0b10 	vmov	r0, r1, d0
 8003dae:	f1b8 0f00 	cmp.w	r8, #0
 8003db2:	d12a      	bne.n	8003e0a <__ieee754_pow+0x1ca>
 8003db4:	b12c      	cbz	r4, 8003dc2 <__ieee754_pow+0x182>
 8003db6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003e6c <__ieee754_pow+0x22c>
 8003dba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8003dbe:	45e6      	cmp	lr, ip
 8003dc0:	d123      	bne.n	8003e0a <__ieee754_pow+0x1ca>
 8003dc2:	2f00      	cmp	r7, #0
 8003dc4:	da05      	bge.n	8003dd2 <__ieee754_pow+0x192>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	2000      	movs	r0, #0
 8003dcc:	4927      	ldr	r1, [pc, #156]	; (8003e6c <__ieee754_pow+0x22c>)
 8003dce:	f7fc fd01 	bl	80007d4 <__aeabi_ddiv>
 8003dd2:	f1b9 0f00 	cmp.w	r9, #0
 8003dd6:	dab7      	bge.n	8003d48 <__ieee754_pow+0x108>
 8003dd8:	9b00      	ldr	r3, [sp, #0]
 8003dda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003dde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003de2:	4323      	orrs	r3, r4
 8003de4:	d108      	bne.n	8003df8 <__ieee754_pow+0x1b8>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fc fa0f 	bl	8000210 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e78d      	b.n	8003d14 <__ieee754_pow+0xd4>
 8003df8:	9b00      	ldr	r3, [sp, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d1a4      	bne.n	8003d48 <__ieee754_pow+0x108>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	e79e      	b.n	8003d48 <__ieee754_pow+0x108>
 8003e0a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8003e0e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8003e12:	950a      	str	r5, [sp, #40]	; 0x28
 8003e14:	9d00      	ldr	r5, [sp, #0]
 8003e16:	46ac      	mov	ip, r5
 8003e18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003e1a:	ea5c 0505 	orrs.w	r5, ip, r5
 8003e1e:	d0e4      	beq.n	8003dea <__ieee754_pow+0x1aa>
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <__ieee754_pow+0x238>)
 8003e22:	429e      	cmp	r6, r3
 8003e24:	f340 80fc 	ble.w	8004020 <__ieee754_pow+0x3e0>
 8003e28:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003e2c:	429e      	cmp	r6, r3
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <__ieee754_pow+0x230>)
 8003e30:	dd07      	ble.n	8003e42 <__ieee754_pow+0x202>
 8003e32:	429c      	cmp	r4, r3
 8003e34:	dc0a      	bgt.n	8003e4c <__ieee754_pow+0x20c>
 8003e36:	2f00      	cmp	r7, #0
 8003e38:	da84      	bge.n	8003d44 <__ieee754_pow+0x104>
 8003e3a:	a307      	add	r3, pc, #28	; (adr r3, 8003e58 <__ieee754_pow+0x218>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	e795      	b.n	8003d6e <__ieee754_pow+0x12e>
 8003e42:	429c      	cmp	r4, r3
 8003e44:	dbf7      	blt.n	8003e36 <__ieee754_pow+0x1f6>
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <__ieee754_pow+0x22c>)
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	dd17      	ble.n	8003e7c <__ieee754_pow+0x23c>
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	dcf4      	bgt.n	8003e3a <__ieee754_pow+0x1fa>
 8003e50:	e778      	b.n	8003d44 <__ieee754_pow+0x104>
 8003e52:	bf00      	nop
 8003e54:	f3af 8000 	nop.w
 8003e58:	8800759c 	.word	0x8800759c
 8003e5c:	7e37e43c 	.word	0x7e37e43c
 8003e60:	7ff00000 	.word	0x7ff00000
 8003e64:	08004a80 	.word	0x08004a80
 8003e68:	433fffff 	.word	0x433fffff
 8003e6c:	3ff00000 	.word	0x3ff00000
 8003e70:	3fefffff 	.word	0x3fefffff
 8003e74:	3fe00000 	.word	0x3fe00000
 8003e78:	41e00000 	.word	0x41e00000
 8003e7c:	4b64      	ldr	r3, [pc, #400]	; (8004010 <__ieee754_pow+0x3d0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f7fc f9c6 	bl	8000210 <__aeabi_dsub>
 8003e84:	a356      	add	r3, pc, #344	; (adr r3, 8003fe0 <__ieee754_pow+0x3a0>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	460d      	mov	r5, r1
 8003e8e:	f7fc fb77 	bl	8000580 <__aeabi_dmul>
 8003e92:	a355      	add	r3, pc, #340	; (adr r3, 8003fe8 <__ieee754_pow+0x3a8>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	4606      	mov	r6, r0
 8003e9a:	460f      	mov	r7, r1
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fb6e 	bl	8000580 <__aeabi_dmul>
 8003ea4:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <__ieee754_pow+0x3d4>)
 8003ea6:	4682      	mov	sl, r0
 8003ea8:	468b      	mov	fp, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4620      	mov	r0, r4
 8003eae:	4629      	mov	r1, r5
 8003eb0:	f7fc fb66 	bl	8000580 <__aeabi_dmul>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	a14d      	add	r1, pc, #308	; (adr r1, 8003ff0 <__ieee754_pow+0x3b0>)
 8003eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ebe:	f7fc f9a7 	bl	8000210 <__aeabi_dsub>
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	f7fc fb5b 	bl	8000580 <__aeabi_dmul>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	2000      	movs	r0, #0
 8003ed0:	4951      	ldr	r1, [pc, #324]	; (8004018 <__ieee754_pow+0x3d8>)
 8003ed2:	f7fc f99d 	bl	8000210 <__aeabi_dsub>
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	4680      	mov	r8, r0
 8003eda:	4689      	mov	r9, r1
 8003edc:	462b      	mov	r3, r5
 8003ede:	4620      	mov	r0, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f7fc fb4d 	bl	8000580 <__aeabi_dmul>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4640      	mov	r0, r8
 8003eec:	4649      	mov	r1, r9
 8003eee:	f7fc fb47 	bl	8000580 <__aeabi_dmul>
 8003ef2:	a341      	add	r3, pc, #260	; (adr r3, 8003ff8 <__ieee754_pow+0x3b8>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f7fc fb42 	bl	8000580 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4650      	mov	r0, sl
 8003f02:	4659      	mov	r1, fp
 8003f04:	f7fc f984 	bl	8000210 <__aeabi_dsub>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4680      	mov	r8, r0
 8003f0e:	4689      	mov	r9, r1
 8003f10:	4630      	mov	r0, r6
 8003f12:	4639      	mov	r1, r7
 8003f14:	f7fc f97e 	bl	8000214 <__adddf3>
 8003f18:	2400      	movs	r4, #0
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	4620      	mov	r0, r4
 8003f20:	460d      	mov	r5, r1
 8003f22:	f7fc f975 	bl	8000210 <__aeabi_dsub>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	f7fc f96f 	bl	8000210 <__aeabi_dsub>
 8003f32:	9b00      	ldr	r3, [sp, #0]
 8003f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	4682      	mov	sl, r0
 8003f3c:	468b      	mov	fp, r1
 8003f3e:	f040 81f1 	bne.w	8004324 <__ieee754_pow+0x6e4>
 8003f42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004000 <__ieee754_pow+0x3c0>
 8003f46:	eeb0 8a47 	vmov.f32	s16, s14
 8003f4a:	eef0 8a67 	vmov.f32	s17, s15
 8003f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f52:	2600      	movs	r6, #0
 8003f54:	4632      	mov	r2, r6
 8003f56:	463b      	mov	r3, r7
 8003f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5c:	f7fc f958 	bl	8000210 <__aeabi_dsub>
 8003f60:	4622      	mov	r2, r4
 8003f62:	462b      	mov	r3, r5
 8003f64:	f7fc fb0c 	bl	8000580 <__aeabi_dmul>
 8003f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f6c:	4680      	mov	r8, r0
 8003f6e:	4689      	mov	r9, r1
 8003f70:	4650      	mov	r0, sl
 8003f72:	4659      	mov	r1, fp
 8003f74:	f7fc fb04 	bl	8000580 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	4649      	mov	r1, r9
 8003f80:	f7fc f948 	bl	8000214 <__adddf3>
 8003f84:	4632      	mov	r2, r6
 8003f86:	463b      	mov	r3, r7
 8003f88:	4680      	mov	r8, r0
 8003f8a:	4689      	mov	r9, r1
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f7fc faf6 	bl	8000580 <__aeabi_dmul>
 8003f94:	460b      	mov	r3, r1
 8003f96:	4604      	mov	r4, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7fc f938 	bl	8000214 <__adddf3>
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <__ieee754_pow+0x3dc>)
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	ec45 4b19 	vmov	d9, r4, r5
 8003fac:	4606      	mov	r6, r0
 8003fae:	460f      	mov	r7, r1
 8003fb0:	468b      	mov	fp, r1
 8003fb2:	f340 82fe 	ble.w	80045b2 <__ieee754_pow+0x972>
 8003fb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003fba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003fbe:	4303      	orrs	r3, r0
 8003fc0:	f000 81f0 	beq.w	80043a4 <__ieee754_pow+0x764>
 8003fc4:	a310      	add	r3, pc, #64	; (adr r3, 8004008 <__ieee754_pow+0x3c8>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	ec51 0b18 	vmov	r0, r1, d8
 8003fce:	f7fc fad7 	bl	8000580 <__aeabi_dmul>
 8003fd2:	a30d      	add	r3, pc, #52	; (adr r3, 8004008 <__ieee754_pow+0x3c8>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	e6cb      	b.n	8003d72 <__ieee754_pow+0x132>
 8003fda:	bf00      	nop
 8003fdc:	f3af 8000 	nop.w
 8003fe0:	60000000 	.word	0x60000000
 8003fe4:	3ff71547 	.word	0x3ff71547
 8003fe8:	f85ddf44 	.word	0xf85ddf44
 8003fec:	3e54ae0b 	.word	0x3e54ae0b
 8003ff0:	55555555 	.word	0x55555555
 8003ff4:	3fd55555 	.word	0x3fd55555
 8003ff8:	652b82fe 	.word	0x652b82fe
 8003ffc:	3ff71547 	.word	0x3ff71547
 8004000:	00000000 	.word	0x00000000
 8004004:	bff00000 	.word	0xbff00000
 8004008:	8800759c 	.word	0x8800759c
 800400c:	7e37e43c 	.word	0x7e37e43c
 8004010:	3ff00000 	.word	0x3ff00000
 8004014:	3fd00000 	.word	0x3fd00000
 8004018:	3fe00000 	.word	0x3fe00000
 800401c:	408fffff 	.word	0x408fffff
 8004020:	4bd7      	ldr	r3, [pc, #860]	; (8004380 <__ieee754_pow+0x740>)
 8004022:	ea03 0309 	and.w	r3, r3, r9
 8004026:	2200      	movs	r2, #0
 8004028:	b92b      	cbnz	r3, 8004036 <__ieee754_pow+0x3f6>
 800402a:	4bd6      	ldr	r3, [pc, #856]	; (8004384 <__ieee754_pow+0x744>)
 800402c:	f7fc faa8 	bl	8000580 <__aeabi_dmul>
 8004030:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004034:	460c      	mov	r4, r1
 8004036:	1523      	asrs	r3, r4, #20
 8004038:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800403c:	4413      	add	r3, r2
 800403e:	9309      	str	r3, [sp, #36]	; 0x24
 8004040:	4bd1      	ldr	r3, [pc, #836]	; (8004388 <__ieee754_pow+0x748>)
 8004042:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004046:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800404a:	429c      	cmp	r4, r3
 800404c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004050:	dd08      	ble.n	8004064 <__ieee754_pow+0x424>
 8004052:	4bce      	ldr	r3, [pc, #824]	; (800438c <__ieee754_pow+0x74c>)
 8004054:	429c      	cmp	r4, r3
 8004056:	f340 8163 	ble.w	8004320 <__ieee754_pow+0x6e0>
 800405a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405c:	3301      	adds	r3, #1
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004064:	2400      	movs	r4, #0
 8004066:	00e3      	lsls	r3, r4, #3
 8004068:	930b      	str	r3, [sp, #44]	; 0x2c
 800406a:	4bc9      	ldr	r3, [pc, #804]	; (8004390 <__ieee754_pow+0x750>)
 800406c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004070:	ed93 7b00 	vldr	d7, [r3]
 8004074:	4629      	mov	r1, r5
 8004076:	ec53 2b17 	vmov	r2, r3, d7
 800407a:	eeb0 8a47 	vmov.f32	s16, s14
 800407e:	eef0 8a67 	vmov.f32	s17, s15
 8004082:	4682      	mov	sl, r0
 8004084:	f7fc f8c4 	bl	8000210 <__aeabi_dsub>
 8004088:	4652      	mov	r2, sl
 800408a:	4606      	mov	r6, r0
 800408c:	460f      	mov	r7, r1
 800408e:	462b      	mov	r3, r5
 8004090:	ec51 0b18 	vmov	r0, r1, d8
 8004094:	f7fc f8be 	bl	8000214 <__adddf3>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	2000      	movs	r0, #0
 800409e:	49bd      	ldr	r1, [pc, #756]	; (8004394 <__ieee754_pow+0x754>)
 80040a0:	f7fc fb98 	bl	80007d4 <__aeabi_ddiv>
 80040a4:	ec41 0b19 	vmov	d9, r0, r1
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	f7fc fa66 	bl	8000580 <__aeabi_dmul>
 80040b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9304      	str	r3, [sp, #16]
 80040c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80040c8:	46ab      	mov	fp, r5
 80040ca:	106d      	asrs	r5, r5, #1
 80040cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80040d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80040d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80040d8:	2200      	movs	r2, #0
 80040da:	4640      	mov	r0, r8
 80040dc:	4649      	mov	r1, r9
 80040de:	4614      	mov	r4, r2
 80040e0:	461d      	mov	r5, r3
 80040e2:	f7fc fa4d 	bl	8000580 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4630      	mov	r0, r6
 80040ec:	4639      	mov	r1, r7
 80040ee:	f7fc f88f 	bl	8000210 <__aeabi_dsub>
 80040f2:	ec53 2b18 	vmov	r2, r3, d8
 80040f6:	4606      	mov	r6, r0
 80040f8:	460f      	mov	r7, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc f887 	bl	8000210 <__aeabi_dsub>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4650      	mov	r0, sl
 8004108:	4659      	mov	r1, fp
 800410a:	f7fc f881 	bl	8000210 <__aeabi_dsub>
 800410e:	4642      	mov	r2, r8
 8004110:	464b      	mov	r3, r9
 8004112:	f7fc fa35 	bl	8000580 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4630      	mov	r0, r6
 800411c:	4639      	mov	r1, r7
 800411e:	f7fc f877 	bl	8000210 <__aeabi_dsub>
 8004122:	ec53 2b19 	vmov	r2, r3, d9
 8004126:	f7fc fa2b 	bl	8000580 <__aeabi_dmul>
 800412a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800412e:	ec41 0b18 	vmov	d8, r0, r1
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	f7fc fa23 	bl	8000580 <__aeabi_dmul>
 800413a:	a37d      	add	r3, pc, #500	; (adr r3, 8004330 <__ieee754_pow+0x6f0>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	4604      	mov	r4, r0
 8004142:	460d      	mov	r5, r1
 8004144:	f7fc fa1c 	bl	8000580 <__aeabi_dmul>
 8004148:	a37b      	add	r3, pc, #492	; (adr r3, 8004338 <__ieee754_pow+0x6f8>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f861 	bl	8000214 <__adddf3>
 8004152:	4622      	mov	r2, r4
 8004154:	462b      	mov	r3, r5
 8004156:	f7fc fa13 	bl	8000580 <__aeabi_dmul>
 800415a:	a379      	add	r3, pc, #484	; (adr r3, 8004340 <__ieee754_pow+0x700>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc f858 	bl	8000214 <__adddf3>
 8004164:	4622      	mov	r2, r4
 8004166:	462b      	mov	r3, r5
 8004168:	f7fc fa0a 	bl	8000580 <__aeabi_dmul>
 800416c:	a376      	add	r3, pc, #472	; (adr r3, 8004348 <__ieee754_pow+0x708>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc f84f 	bl	8000214 <__adddf3>
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	f7fc fa01 	bl	8000580 <__aeabi_dmul>
 800417e:	a374      	add	r3, pc, #464	; (adr r3, 8004350 <__ieee754_pow+0x710>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fc f846 	bl	8000214 <__adddf3>
 8004188:	4622      	mov	r2, r4
 800418a:	462b      	mov	r3, r5
 800418c:	f7fc f9f8 	bl	8000580 <__aeabi_dmul>
 8004190:	a371      	add	r3, pc, #452	; (adr r3, 8004358 <__ieee754_pow+0x718>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fc f83d 	bl	8000214 <__adddf3>
 800419a:	4622      	mov	r2, r4
 800419c:	4606      	mov	r6, r0
 800419e:	460f      	mov	r7, r1
 80041a0:	462b      	mov	r3, r5
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fc f9eb 	bl	8000580 <__aeabi_dmul>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4630      	mov	r0, r6
 80041b0:	4639      	mov	r1, r7
 80041b2:	f7fc f9e5 	bl	8000580 <__aeabi_dmul>
 80041b6:	4642      	mov	r2, r8
 80041b8:	4604      	mov	r4, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	464b      	mov	r3, r9
 80041be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041c2:	f7fc f827 	bl	8000214 <__adddf3>
 80041c6:	ec53 2b18 	vmov	r2, r3, d8
 80041ca:	f7fc f9d9 	bl	8000580 <__aeabi_dmul>
 80041ce:	4622      	mov	r2, r4
 80041d0:	462b      	mov	r3, r5
 80041d2:	f7fc f81f 	bl	8000214 <__adddf3>
 80041d6:	4642      	mov	r2, r8
 80041d8:	4682      	mov	sl, r0
 80041da:	468b      	mov	fp, r1
 80041dc:	464b      	mov	r3, r9
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc f9cd 	bl	8000580 <__aeabi_dmul>
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <__ieee754_pow+0x758>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	4606      	mov	r6, r0
 80041ec:	460f      	mov	r7, r1
 80041ee:	f7fc f811 	bl	8000214 <__adddf3>
 80041f2:	4652      	mov	r2, sl
 80041f4:	465b      	mov	r3, fp
 80041f6:	f7fc f80d 	bl	8000214 <__adddf3>
 80041fa:	9c04      	ldr	r4, [sp, #16]
 80041fc:	460d      	mov	r5, r1
 80041fe:	4622      	mov	r2, r4
 8004200:	460b      	mov	r3, r1
 8004202:	4640      	mov	r0, r8
 8004204:	4649      	mov	r1, r9
 8004206:	f7fc f9bb 	bl	8000580 <__aeabi_dmul>
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <__ieee754_pow+0x758>)
 800420c:	4680      	mov	r8, r0
 800420e:	4689      	mov	r9, r1
 8004210:	2200      	movs	r2, #0
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fb fffb 	bl	8000210 <__aeabi_dsub>
 800421a:	4632      	mov	r2, r6
 800421c:	463b      	mov	r3, r7
 800421e:	f7fb fff7 	bl	8000210 <__aeabi_dsub>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4650      	mov	r0, sl
 8004228:	4659      	mov	r1, fp
 800422a:	f7fb fff1 	bl	8000210 <__aeabi_dsub>
 800422e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004232:	f7fc f9a5 	bl	8000580 <__aeabi_dmul>
 8004236:	4622      	mov	r2, r4
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	462b      	mov	r3, r5
 800423e:	ec51 0b18 	vmov	r0, r1, d8
 8004242:	f7fc f99d 	bl	8000580 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4630      	mov	r0, r6
 800424c:	4639      	mov	r1, r7
 800424e:	f7fb ffe1 	bl	8000214 <__adddf3>
 8004252:	4606      	mov	r6, r0
 8004254:	460f      	mov	r7, r1
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4640      	mov	r0, r8
 800425c:	4649      	mov	r1, r9
 800425e:	f7fb ffd9 	bl	8000214 <__adddf3>
 8004262:	9c04      	ldr	r4, [sp, #16]
 8004264:	a33e      	add	r3, pc, #248	; (adr r3, 8004360 <__ieee754_pow+0x720>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	4620      	mov	r0, r4
 800426c:	460d      	mov	r5, r1
 800426e:	f7fc f987 	bl	8000580 <__aeabi_dmul>
 8004272:	4642      	mov	r2, r8
 8004274:	ec41 0b18 	vmov	d8, r0, r1
 8004278:	464b      	mov	r3, r9
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f7fb ffc7 	bl	8000210 <__aeabi_dsub>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4630      	mov	r0, r6
 8004288:	4639      	mov	r1, r7
 800428a:	f7fb ffc1 	bl	8000210 <__aeabi_dsub>
 800428e:	a336      	add	r3, pc, #216	; (adr r3, 8004368 <__ieee754_pow+0x728>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fc f974 	bl	8000580 <__aeabi_dmul>
 8004298:	a335      	add	r3, pc, #212	; (adr r3, 8004370 <__ieee754_pow+0x730>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	4606      	mov	r6, r0
 80042a0:	460f      	mov	r7, r1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc f96b 	bl	8000580 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4630      	mov	r0, r6
 80042b0:	4639      	mov	r1, r7
 80042b2:	f7fb ffaf 	bl	8000214 <__adddf3>
 80042b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042b8:	4b38      	ldr	r3, [pc, #224]	; (800439c <__ieee754_pow+0x75c>)
 80042ba:	4413      	add	r3, r2
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb ffa8 	bl	8000214 <__adddf3>
 80042c4:	4682      	mov	sl, r0
 80042c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c8:	468b      	mov	fp, r1
 80042ca:	f7fc f8ef 	bl	80004ac <__aeabi_i2d>
 80042ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <__ieee754_pow+0x760>)
 80042d2:	4413      	add	r3, r2
 80042d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042d8:	4606      	mov	r6, r0
 80042da:	460f      	mov	r7, r1
 80042dc:	4652      	mov	r2, sl
 80042de:	465b      	mov	r3, fp
 80042e0:	ec51 0b18 	vmov	r0, r1, d8
 80042e4:	f7fb ff96 	bl	8000214 <__adddf3>
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f7fb ff92 	bl	8000214 <__adddf3>
 80042f0:	4632      	mov	r2, r6
 80042f2:	463b      	mov	r3, r7
 80042f4:	f7fb ff8e 	bl	8000214 <__adddf3>
 80042f8:	9c04      	ldr	r4, [sp, #16]
 80042fa:	4632      	mov	r2, r6
 80042fc:	463b      	mov	r3, r7
 80042fe:	4620      	mov	r0, r4
 8004300:	460d      	mov	r5, r1
 8004302:	f7fb ff85 	bl	8000210 <__aeabi_dsub>
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	f7fb ff81 	bl	8000210 <__aeabi_dsub>
 800430e:	ec53 2b18 	vmov	r2, r3, d8
 8004312:	f7fb ff7d 	bl	8000210 <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4650      	mov	r0, sl
 800431c:	4659      	mov	r1, fp
 800431e:	e606      	b.n	8003f2e <__ieee754_pow+0x2ee>
 8004320:	2401      	movs	r4, #1
 8004322:	e6a0      	b.n	8004066 <__ieee754_pow+0x426>
 8004324:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004378 <__ieee754_pow+0x738>
 8004328:	e60d      	b.n	8003f46 <__ieee754_pow+0x306>
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w
 8004330:	4a454eef 	.word	0x4a454eef
 8004334:	3fca7e28 	.word	0x3fca7e28
 8004338:	93c9db65 	.word	0x93c9db65
 800433c:	3fcd864a 	.word	0x3fcd864a
 8004340:	a91d4101 	.word	0xa91d4101
 8004344:	3fd17460 	.word	0x3fd17460
 8004348:	518f264d 	.word	0x518f264d
 800434c:	3fd55555 	.word	0x3fd55555
 8004350:	db6fabff 	.word	0xdb6fabff
 8004354:	3fdb6db6 	.word	0x3fdb6db6
 8004358:	33333303 	.word	0x33333303
 800435c:	3fe33333 	.word	0x3fe33333
 8004360:	e0000000 	.word	0xe0000000
 8004364:	3feec709 	.word	0x3feec709
 8004368:	dc3a03fd 	.word	0xdc3a03fd
 800436c:	3feec709 	.word	0x3feec709
 8004370:	145b01f5 	.word	0x145b01f5
 8004374:	be3e2fe0 	.word	0xbe3e2fe0
 8004378:	00000000 	.word	0x00000000
 800437c:	3ff00000 	.word	0x3ff00000
 8004380:	7ff00000 	.word	0x7ff00000
 8004384:	43400000 	.word	0x43400000
 8004388:	0003988e 	.word	0x0003988e
 800438c:	000bb679 	.word	0x000bb679
 8004390:	08004a88 	.word	0x08004a88
 8004394:	3ff00000 	.word	0x3ff00000
 8004398:	40080000 	.word	0x40080000
 800439c:	08004aa8 	.word	0x08004aa8
 80043a0:	08004a98 	.word	0x08004a98
 80043a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800467c <__ieee754_pow+0xa3c>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fb ff31 	bl	8000214 <__adddf3>
 80043b2:	4622      	mov	r2, r4
 80043b4:	ec41 0b1a 	vmov	d10, r0, r1
 80043b8:	462b      	mov	r3, r5
 80043ba:	4630      	mov	r0, r6
 80043bc:	4639      	mov	r1, r7
 80043be:	f7fb ff27 	bl	8000210 <__aeabi_dsub>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	ec51 0b1a 	vmov	r0, r1, d10
 80043ca:	f7fc fb69 	bl	8000aa0 <__aeabi_dcmpgt>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f47f adf8 	bne.w	8003fc4 <__ieee754_pow+0x384>
 80043d4:	4aa4      	ldr	r2, [pc, #656]	; (8004668 <__ieee754_pow+0xa28>)
 80043d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80043da:	4293      	cmp	r3, r2
 80043dc:	f340 810b 	ble.w	80045f6 <__ieee754_pow+0x9b6>
 80043e0:	151b      	asrs	r3, r3, #20
 80043e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80043e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80043ea:	fa4a f303 	asr.w	r3, sl, r3
 80043ee:	445b      	add	r3, fp
 80043f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80043f4:	4e9d      	ldr	r6, [pc, #628]	; (800466c <__ieee754_pow+0xa2c>)
 80043f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80043fa:	4116      	asrs	r6, r2
 80043fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004400:	2000      	movs	r0, #0
 8004402:	ea23 0106 	bic.w	r1, r3, r6
 8004406:	f1c2 0214 	rsb	r2, r2, #20
 800440a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800440e:	fa4a fa02 	asr.w	sl, sl, r2
 8004412:	f1bb 0f00 	cmp.w	fp, #0
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	bfb8      	it	lt
 8004420:	f1ca 0a00 	rsblt	sl, sl, #0
 8004424:	f7fb fef4 	bl	8000210 <__aeabi_dsub>
 8004428:	ec41 0b19 	vmov	d9, r0, r1
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	ec51 0b19 	vmov	r0, r1, d9
 8004434:	f7fb feee 	bl	8000214 <__adddf3>
 8004438:	2400      	movs	r4, #0
 800443a:	a379      	add	r3, pc, #484	; (adr r3, 8004620 <__ieee754_pow+0x9e0>)
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	4620      	mov	r0, r4
 8004442:	460d      	mov	r5, r1
 8004444:	f7fc f89c 	bl	8000580 <__aeabi_dmul>
 8004448:	ec53 2b19 	vmov	r2, r3, d9
 800444c:	4606      	mov	r6, r0
 800444e:	460f      	mov	r7, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb fedc 	bl	8000210 <__aeabi_dsub>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4640      	mov	r0, r8
 800445e:	4649      	mov	r1, r9
 8004460:	f7fb fed6 	bl	8000210 <__aeabi_dsub>
 8004464:	a370      	add	r3, pc, #448	; (adr r3, 8004628 <__ieee754_pow+0x9e8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f889 	bl	8000580 <__aeabi_dmul>
 800446e:	a370      	add	r3, pc, #448	; (adr r3, 8004630 <__ieee754_pow+0x9f0>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4680      	mov	r8, r0
 8004476:	4689      	mov	r9, r1
 8004478:	4620      	mov	r0, r4
 800447a:	4629      	mov	r1, r5
 800447c:	f7fc f880 	bl	8000580 <__aeabi_dmul>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fb fec4 	bl	8000214 <__adddf3>
 800448c:	4604      	mov	r4, r0
 800448e:	460d      	mov	r5, r1
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fb febc 	bl	8000214 <__adddf3>
 800449c:	4632      	mov	r2, r6
 800449e:	463b      	mov	r3, r7
 80044a0:	4680      	mov	r8, r0
 80044a2:	4689      	mov	r9, r1
 80044a4:	f7fb feb4 	bl	8000210 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4620      	mov	r0, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7fb feae 	bl	8000210 <__aeabi_dsub>
 80044b4:	4642      	mov	r2, r8
 80044b6:	4606      	mov	r6, r0
 80044b8:	460f      	mov	r7, r1
 80044ba:	464b      	mov	r3, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fc f85e 	bl	8000580 <__aeabi_dmul>
 80044c4:	a35c      	add	r3, pc, #368	; (adr r3, 8004638 <__ieee754_pow+0x9f8>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	4604      	mov	r4, r0
 80044cc:	460d      	mov	r5, r1
 80044ce:	f7fc f857 	bl	8000580 <__aeabi_dmul>
 80044d2:	a35b      	add	r3, pc, #364	; (adr r3, 8004640 <__ieee754_pow+0xa00>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fb fe9a 	bl	8000210 <__aeabi_dsub>
 80044dc:	4622      	mov	r2, r4
 80044de:	462b      	mov	r3, r5
 80044e0:	f7fc f84e 	bl	8000580 <__aeabi_dmul>
 80044e4:	a358      	add	r3, pc, #352	; (adr r3, 8004648 <__ieee754_pow+0xa08>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fb fe93 	bl	8000214 <__adddf3>
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	f7fc f845 	bl	8000580 <__aeabi_dmul>
 80044f6:	a356      	add	r3, pc, #344	; (adr r3, 8004650 <__ieee754_pow+0xa10>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fb fe88 	bl	8000210 <__aeabi_dsub>
 8004500:	4622      	mov	r2, r4
 8004502:	462b      	mov	r3, r5
 8004504:	f7fc f83c 	bl	8000580 <__aeabi_dmul>
 8004508:	a353      	add	r3, pc, #332	; (adr r3, 8004658 <__ieee754_pow+0xa18>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fb fe81 	bl	8000214 <__adddf3>
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	f7fc f833 	bl	8000580 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fb fe75 	bl	8000210 <__aeabi_dsub>
 8004526:	4604      	mov	r4, r0
 8004528:	460d      	mov	r5, r1
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4640      	mov	r0, r8
 8004530:	4649      	mov	r1, r9
 8004532:	f7fc f825 	bl	8000580 <__aeabi_dmul>
 8004536:	2200      	movs	r2, #0
 8004538:	ec41 0b19 	vmov	d9, r0, r1
 800453c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004540:	4620      	mov	r0, r4
 8004542:	4629      	mov	r1, r5
 8004544:	f7fb fe64 	bl	8000210 <__aeabi_dsub>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	ec51 0b19 	vmov	r0, r1, d9
 8004550:	f7fc f940 	bl	80007d4 <__aeabi_ddiv>
 8004554:	4632      	mov	r2, r6
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	463b      	mov	r3, r7
 800455c:	4640      	mov	r0, r8
 800455e:	4649      	mov	r1, r9
 8004560:	f7fc f80e 	bl	8000580 <__aeabi_dmul>
 8004564:	4632      	mov	r2, r6
 8004566:	463b      	mov	r3, r7
 8004568:	f7fb fe54 	bl	8000214 <__adddf3>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fe4c 	bl	8000210 <__aeabi_dsub>
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	f7fb fe48 	bl	8000210 <__aeabi_dsub>
 8004580:	460b      	mov	r3, r1
 8004582:	4602      	mov	r2, r0
 8004584:	493a      	ldr	r1, [pc, #232]	; (8004670 <__ieee754_pow+0xa30>)
 8004586:	2000      	movs	r0, #0
 8004588:	f7fb fe42 	bl	8000210 <__aeabi_dsub>
 800458c:	e9cd 0100 	strd	r0, r1, [sp]
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459a:	da2f      	bge.n	80045fc <__ieee754_pow+0x9bc>
 800459c:	4650      	mov	r0, sl
 800459e:	ed9d 0b00 	vldr	d0, [sp]
 80045a2:	f000 f9cd 	bl	8004940 <scalbn>
 80045a6:	ec51 0b10 	vmov	r0, r1, d0
 80045aa:	ec53 2b18 	vmov	r2, r3, d8
 80045ae:	f7ff bbe0 	b.w	8003d72 <__ieee754_pow+0x132>
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <__ieee754_pow+0xa34>)
 80045b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80045b8:	429e      	cmp	r6, r3
 80045ba:	f77f af0b 	ble.w	80043d4 <__ieee754_pow+0x794>
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <__ieee754_pow+0xa38>)
 80045c0:	440b      	add	r3, r1
 80045c2:	4303      	orrs	r3, r0
 80045c4:	d00b      	beq.n	80045de <__ieee754_pow+0x99e>
 80045c6:	a326      	add	r3, pc, #152	; (adr r3, 8004660 <__ieee754_pow+0xa20>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	ec51 0b18 	vmov	r0, r1, d8
 80045d0:	f7fb ffd6 	bl	8000580 <__aeabi_dmul>
 80045d4:	a322      	add	r3, pc, #136	; (adr r3, 8004660 <__ieee754_pow+0xa20>)
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f7ff bbca 	b.w	8003d72 <__ieee754_pow+0x132>
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	f7fb fe15 	bl	8000210 <__aeabi_dsub>
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	f7fc fa4f 	bl	8000a8c <__aeabi_dcmpge>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f43f aef0 	beq.w	80043d4 <__ieee754_pow+0x794>
 80045f4:	e7e7      	b.n	80045c6 <__ieee754_pow+0x986>
 80045f6:	f04f 0a00 	mov.w	sl, #0
 80045fa:	e717      	b.n	800442c <__ieee754_pow+0x7ec>
 80045fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004600:	4619      	mov	r1, r3
 8004602:	e7d2      	b.n	80045aa <__ieee754_pow+0x96a>
 8004604:	491a      	ldr	r1, [pc, #104]	; (8004670 <__ieee754_pow+0xa30>)
 8004606:	2000      	movs	r0, #0
 8004608:	f7ff bb9e 	b.w	8003d48 <__ieee754_pow+0x108>
 800460c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004610:	f7ff bb9a 	b.w	8003d48 <__ieee754_pow+0x108>
 8004614:	9000      	str	r0, [sp, #0]
 8004616:	f7ff bb76 	b.w	8003d06 <__ieee754_pow+0xc6>
 800461a:	2100      	movs	r1, #0
 800461c:	f7ff bb60 	b.w	8003ce0 <__ieee754_pow+0xa0>
 8004620:	00000000 	.word	0x00000000
 8004624:	3fe62e43 	.word	0x3fe62e43
 8004628:	fefa39ef 	.word	0xfefa39ef
 800462c:	3fe62e42 	.word	0x3fe62e42
 8004630:	0ca86c39 	.word	0x0ca86c39
 8004634:	be205c61 	.word	0xbe205c61
 8004638:	72bea4d0 	.word	0x72bea4d0
 800463c:	3e663769 	.word	0x3e663769
 8004640:	c5d26bf1 	.word	0xc5d26bf1
 8004644:	3ebbbd41 	.word	0x3ebbbd41
 8004648:	af25de2c 	.word	0xaf25de2c
 800464c:	3f11566a 	.word	0x3f11566a
 8004650:	16bebd93 	.word	0x16bebd93
 8004654:	3f66c16c 	.word	0x3f66c16c
 8004658:	5555553e 	.word	0x5555553e
 800465c:	3fc55555 	.word	0x3fc55555
 8004660:	c2f8f359 	.word	0xc2f8f359
 8004664:	01a56e1f 	.word	0x01a56e1f
 8004668:	3fe00000 	.word	0x3fe00000
 800466c:	000fffff 	.word	0x000fffff
 8004670:	3ff00000 	.word	0x3ff00000
 8004674:	4090cbff 	.word	0x4090cbff
 8004678:	3f6f3400 	.word	0x3f6f3400
 800467c:	652b82fe 	.word	0x652b82fe
 8004680:	3c971547 	.word	0x3c971547

08004684 <__ieee754_sqrt>:
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	ec55 4b10 	vmov	r4, r5, d0
 800468c:	4e56      	ldr	r6, [pc, #344]	; (80047e8 <__ieee754_sqrt+0x164>)
 800468e:	43ae      	bics	r6, r5
 8004690:	ee10 0a10 	vmov	r0, s0
 8004694:	ee10 3a10 	vmov	r3, s0
 8004698:	4629      	mov	r1, r5
 800469a:	462a      	mov	r2, r5
 800469c:	d110      	bne.n	80046c0 <__ieee754_sqrt+0x3c>
 800469e:	ee10 2a10 	vmov	r2, s0
 80046a2:	462b      	mov	r3, r5
 80046a4:	f7fb ff6c 	bl	8000580 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fb fdb0 	bl	8000214 <__adddf3>
 80046b4:	4604      	mov	r4, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	ec45 4b10 	vmov	d0, r4, r5
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	dc10      	bgt.n	80046e6 <__ieee754_sqrt+0x62>
 80046c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80046c8:	4330      	orrs	r0, r6
 80046ca:	d0f5      	beq.n	80046b8 <__ieee754_sqrt+0x34>
 80046cc:	b15d      	cbz	r5, 80046e6 <__ieee754_sqrt+0x62>
 80046ce:	ee10 2a10 	vmov	r2, s0
 80046d2:	462b      	mov	r3, r5
 80046d4:	ee10 0a10 	vmov	r0, s0
 80046d8:	f7fb fd9a 	bl	8000210 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	f7fc f878 	bl	80007d4 <__aeabi_ddiv>
 80046e4:	e7e6      	b.n	80046b4 <__ieee754_sqrt+0x30>
 80046e6:	1509      	asrs	r1, r1, #20
 80046e8:	d076      	beq.n	80047d8 <__ieee754_sqrt+0x154>
 80046ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80046ee:	07ce      	lsls	r6, r1, #31
 80046f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80046f4:	bf5e      	ittt	pl
 80046f6:	0fda      	lsrpl	r2, r3, #31
 80046f8:	005b      	lslpl	r3, r3, #1
 80046fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80046fe:	0fda      	lsrs	r2, r3, #31
 8004700:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004704:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004708:	2000      	movs	r0, #0
 800470a:	106d      	asrs	r5, r5, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	f04f 0e16 	mov.w	lr, #22
 8004712:	4684      	mov	ip, r0
 8004714:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004718:	eb0c 0401 	add.w	r4, ip, r1
 800471c:	4294      	cmp	r4, r2
 800471e:	bfde      	ittt	le
 8004720:	1b12      	suble	r2, r2, r4
 8004722:	eb04 0c01 	addle.w	ip, r4, r1
 8004726:	1840      	addle	r0, r0, r1
 8004728:	0052      	lsls	r2, r2, #1
 800472a:	f1be 0e01 	subs.w	lr, lr, #1
 800472e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004732:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004736:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800473a:	d1ed      	bne.n	8004718 <__ieee754_sqrt+0x94>
 800473c:	4671      	mov	r1, lr
 800473e:	2720      	movs	r7, #32
 8004740:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004744:	4562      	cmp	r2, ip
 8004746:	eb04 060e 	add.w	r6, r4, lr
 800474a:	dc02      	bgt.n	8004752 <__ieee754_sqrt+0xce>
 800474c:	d113      	bne.n	8004776 <__ieee754_sqrt+0xf2>
 800474e:	429e      	cmp	r6, r3
 8004750:	d811      	bhi.n	8004776 <__ieee754_sqrt+0xf2>
 8004752:	2e00      	cmp	r6, #0
 8004754:	eb06 0e04 	add.w	lr, r6, r4
 8004758:	da43      	bge.n	80047e2 <__ieee754_sqrt+0x15e>
 800475a:	f1be 0f00 	cmp.w	lr, #0
 800475e:	db40      	blt.n	80047e2 <__ieee754_sqrt+0x15e>
 8004760:	f10c 0801 	add.w	r8, ip, #1
 8004764:	eba2 020c 	sub.w	r2, r2, ip
 8004768:	429e      	cmp	r6, r3
 800476a:	bf88      	it	hi
 800476c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	4421      	add	r1, r4
 8004774:	46c4      	mov	ip, r8
 8004776:	0052      	lsls	r2, r2, #1
 8004778:	3f01      	subs	r7, #1
 800477a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800477e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004782:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004786:	d1dd      	bne.n	8004744 <__ieee754_sqrt+0xc0>
 8004788:	4313      	orrs	r3, r2
 800478a:	d006      	beq.n	800479a <__ieee754_sqrt+0x116>
 800478c:	1c4c      	adds	r4, r1, #1
 800478e:	bf13      	iteet	ne
 8004790:	3101      	addne	r1, #1
 8004792:	3001      	addeq	r0, #1
 8004794:	4639      	moveq	r1, r7
 8004796:	f021 0101 	bicne.w	r1, r1, #1
 800479a:	1043      	asrs	r3, r0, #1
 800479c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80047a0:	0849      	lsrs	r1, r1, #1
 80047a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80047a6:	07c2      	lsls	r2, r0, #31
 80047a8:	bf48      	it	mi
 80047aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80047ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80047b2:	460c      	mov	r4, r1
 80047b4:	463d      	mov	r5, r7
 80047b6:	e77f      	b.n	80046b8 <__ieee754_sqrt+0x34>
 80047b8:	0ada      	lsrs	r2, r3, #11
 80047ba:	3815      	subs	r0, #21
 80047bc:	055b      	lsls	r3, r3, #21
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d0fa      	beq.n	80047b8 <__ieee754_sqrt+0x134>
 80047c2:	02d7      	lsls	r7, r2, #11
 80047c4:	d50a      	bpl.n	80047dc <__ieee754_sqrt+0x158>
 80047c6:	f1c1 0420 	rsb	r4, r1, #32
 80047ca:	fa23 f404 	lsr.w	r4, r3, r4
 80047ce:	1e4d      	subs	r5, r1, #1
 80047d0:	408b      	lsls	r3, r1
 80047d2:	4322      	orrs	r2, r4
 80047d4:	1b41      	subs	r1, r0, r5
 80047d6:	e788      	b.n	80046ea <__ieee754_sqrt+0x66>
 80047d8:	4608      	mov	r0, r1
 80047da:	e7f0      	b.n	80047be <__ieee754_sqrt+0x13a>
 80047dc:	0052      	lsls	r2, r2, #1
 80047de:	3101      	adds	r1, #1
 80047e0:	e7ef      	b.n	80047c2 <__ieee754_sqrt+0x13e>
 80047e2:	46e0      	mov	r8, ip
 80047e4:	e7be      	b.n	8004764 <__ieee754_sqrt+0xe0>
 80047e6:	bf00      	nop
 80047e8:	7ff00000 	.word	0x7ff00000

080047ec <fabs>:
 80047ec:	ec51 0b10 	vmov	r0, r1, d0
 80047f0:	ee10 2a10 	vmov	r2, s0
 80047f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047f8:	ec43 2b10 	vmov	d0, r2, r3
 80047fc:	4770      	bx	lr

080047fe <finite>:
 80047fe:	b082      	sub	sp, #8
 8004800:	ed8d 0b00 	vstr	d0, [sp]
 8004804:	9801      	ldr	r0, [sp, #4]
 8004806:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800480a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800480e:	0fc0      	lsrs	r0, r0, #31
 8004810:	b002      	add	sp, #8
 8004812:	4770      	bx	lr
 8004814:	0000      	movs	r0, r0
	...

08004818 <nan>:
 8004818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004820 <nan+0x8>
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	00000000 	.word	0x00000000
 8004824:	7ff80000 	.word	0x7ff80000

08004828 <rint>:
 8004828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800482a:	ec51 0b10 	vmov	r0, r1, d0
 800482e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004832:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004836:	2e13      	cmp	r6, #19
 8004838:	ee10 4a10 	vmov	r4, s0
 800483c:	460b      	mov	r3, r1
 800483e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004842:	dc58      	bgt.n	80048f6 <rint+0xce>
 8004844:	2e00      	cmp	r6, #0
 8004846:	da2b      	bge.n	80048a0 <rint+0x78>
 8004848:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800484c:	4302      	orrs	r2, r0
 800484e:	d023      	beq.n	8004898 <rint+0x70>
 8004850:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004854:	4302      	orrs	r2, r0
 8004856:	4254      	negs	r4, r2
 8004858:	4314      	orrs	r4, r2
 800485a:	0c4b      	lsrs	r3, r1, #17
 800485c:	0b24      	lsrs	r4, r4, #12
 800485e:	045b      	lsls	r3, r3, #17
 8004860:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004864:	ea44 0103 	orr.w	r1, r4, r3
 8004868:	4b32      	ldr	r3, [pc, #200]	; (8004934 <rint+0x10c>)
 800486a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800486e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4630      	mov	r0, r6
 8004878:	4639      	mov	r1, r7
 800487a:	f7fb fccb 	bl	8000214 <__adddf3>
 800487e:	e9cd 0100 	strd	r0, r1, [sp]
 8004882:	463b      	mov	r3, r7
 8004884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004888:	4632      	mov	r2, r6
 800488a:	f7fb fcc1 	bl	8000210 <__aeabi_dsub>
 800488e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004892:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004896:	4639      	mov	r1, r7
 8004898:	ec41 0b10 	vmov	d0, r0, r1
 800489c:	b003      	add	sp, #12
 800489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a0:	4a25      	ldr	r2, [pc, #148]	; (8004938 <rint+0x110>)
 80048a2:	4132      	asrs	r2, r6
 80048a4:	ea01 0702 	and.w	r7, r1, r2
 80048a8:	4307      	orrs	r7, r0
 80048aa:	d0f5      	beq.n	8004898 <rint+0x70>
 80048ac:	0851      	lsrs	r1, r2, #1
 80048ae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80048b2:	4314      	orrs	r4, r2
 80048b4:	d00c      	beq.n	80048d0 <rint+0xa8>
 80048b6:	ea23 0201 	bic.w	r2, r3, r1
 80048ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048be:	2e13      	cmp	r6, #19
 80048c0:	fa43 f606 	asr.w	r6, r3, r6
 80048c4:	bf0c      	ite	eq
 80048c6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80048ca:	2400      	movne	r4, #0
 80048cc:	ea42 0306 	orr.w	r3, r2, r6
 80048d0:	4918      	ldr	r1, [pc, #96]	; (8004934 <rint+0x10c>)
 80048d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80048d6:	4622      	mov	r2, r4
 80048d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80048dc:	4620      	mov	r0, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	f7fb fc98 	bl	8000214 <__adddf3>
 80048e4:	e9cd 0100 	strd	r0, r1, [sp]
 80048e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ec:	4622      	mov	r2, r4
 80048ee:	462b      	mov	r3, r5
 80048f0:	f7fb fc8e 	bl	8000210 <__aeabi_dsub>
 80048f4:	e7d0      	b.n	8004898 <rint+0x70>
 80048f6:	2e33      	cmp	r6, #51	; 0x33
 80048f8:	dd07      	ble.n	800490a <rint+0xe2>
 80048fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80048fe:	d1cb      	bne.n	8004898 <rint+0x70>
 8004900:	ee10 2a10 	vmov	r2, s0
 8004904:	f7fb fc86 	bl	8000214 <__adddf3>
 8004908:	e7c6      	b.n	8004898 <rint+0x70>
 800490a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800490e:	f04f 36ff 	mov.w	r6, #4294967295
 8004912:	40d6      	lsrs	r6, r2
 8004914:	4230      	tst	r0, r6
 8004916:	d0bf      	beq.n	8004898 <rint+0x70>
 8004918:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800491c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004920:	bf1f      	itttt	ne
 8004922:	ea24 0101 	bicne.w	r1, r4, r1
 8004926:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800492a:	fa44 f202 	asrne.w	r2, r4, r2
 800492e:	ea41 0402 	orrne.w	r4, r1, r2
 8004932:	e7cd      	b.n	80048d0 <rint+0xa8>
 8004934:	08004ab8 	.word	0x08004ab8
 8004938:	000fffff 	.word	0x000fffff
 800493c:	00000000 	.word	0x00000000

08004940 <scalbn>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	ec55 4b10 	vmov	r4, r5, d0
 8004946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800494a:	4606      	mov	r6, r0
 800494c:	462b      	mov	r3, r5
 800494e:	b99a      	cbnz	r2, 8004978 <scalbn+0x38>
 8004950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004954:	4323      	orrs	r3, r4
 8004956:	d036      	beq.n	80049c6 <scalbn+0x86>
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <scalbn+0x100>)
 800495a:	4629      	mov	r1, r5
 800495c:	ee10 0a10 	vmov	r0, s0
 8004960:	2200      	movs	r2, #0
 8004962:	f7fb fe0d 	bl	8000580 <__aeabi_dmul>
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <scalbn+0x104>)
 8004968:	429e      	cmp	r6, r3
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
 800496e:	da10      	bge.n	8004992 <scalbn+0x52>
 8004970:	a32b      	add	r3, pc, #172	; (adr r3, 8004a20 <scalbn+0xe0>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	e03a      	b.n	80049ee <scalbn+0xae>
 8004978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800497c:	428a      	cmp	r2, r1
 800497e:	d10c      	bne.n	800499a <scalbn+0x5a>
 8004980:	ee10 2a10 	vmov	r2, s0
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fb fc44 	bl	8000214 <__adddf3>
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	e019      	b.n	80049c6 <scalbn+0x86>
 8004992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004996:	460b      	mov	r3, r1
 8004998:	3a36      	subs	r2, #54	; 0x36
 800499a:	4432      	add	r2, r6
 800499c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80049a0:	428a      	cmp	r2, r1
 80049a2:	dd08      	ble.n	80049b6 <scalbn+0x76>
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	a120      	add	r1, pc, #128	; (adr r1, 8004a28 <scalbn+0xe8>)
 80049a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049ac:	da1c      	bge.n	80049e8 <scalbn+0xa8>
 80049ae:	a120      	add	r1, pc, #128	; (adr r1, 8004a30 <scalbn+0xf0>)
 80049b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049b4:	e018      	b.n	80049e8 <scalbn+0xa8>
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	dd08      	ble.n	80049cc <scalbn+0x8c>
 80049ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049c6:	ec45 4b10 	vmov	d0, r4, r5
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80049d0:	da19      	bge.n	8004a06 <scalbn+0xc6>
 80049d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049d6:	429e      	cmp	r6, r3
 80049d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80049dc:	dd0a      	ble.n	80049f4 <scalbn+0xb4>
 80049de:	a112      	add	r1, pc, #72	; (adr r1, 8004a28 <scalbn+0xe8>)
 80049e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e2      	bne.n	80049ae <scalbn+0x6e>
 80049e8:	a30f      	add	r3, pc, #60	; (adr r3, 8004a28 <scalbn+0xe8>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fdc7 	bl	8000580 <__aeabi_dmul>
 80049f2:	e7cb      	b.n	800498c <scalbn+0x4c>
 80049f4:	a10a      	add	r1, pc, #40	; (adr r1, 8004a20 <scalbn+0xe0>)
 80049f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0b8      	beq.n	8004970 <scalbn+0x30>
 80049fe:	a10e      	add	r1, pc, #56	; (adr r1, 8004a38 <scalbn+0xf8>)
 8004a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a04:	e7b4      	b.n	8004970 <scalbn+0x30>
 8004a06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a0a:	3236      	adds	r2, #54	; 0x36
 8004a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004a14:	4620      	mov	r0, r4
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <scalbn+0x108>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	e7e8      	b.n	80049ee <scalbn+0xae>
 8004a1c:	f3af 8000 	nop.w
 8004a20:	c2f8f359 	.word	0xc2f8f359
 8004a24:	01a56e1f 	.word	0x01a56e1f
 8004a28:	8800759c 	.word	0x8800759c
 8004a2c:	7e37e43c 	.word	0x7e37e43c
 8004a30:	8800759c 	.word	0x8800759c
 8004a34:	fe37e43c 	.word	0xfe37e43c
 8004a38:	c2f8f359 	.word	0xc2f8f359
 8004a3c:	81a56e1f 	.word	0x81a56e1f
 8004a40:	43500000 	.word	0x43500000
 8004a44:	ffff3cb0 	.word	0xffff3cb0
 8004a48:	3c900000 	.word	0x3c900000

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
